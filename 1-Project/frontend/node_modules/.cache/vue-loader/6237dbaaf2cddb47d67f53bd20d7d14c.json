{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\image-upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\image-upload.vue","mtime":1641838499614},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1641838768457}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { FileUploader } from '@/shared/file-upload/file-uploader';\nimport Errors from '@/shared/error/errors';\n\nexport default {\n  name: 'app-image-upload',\n  props: ['path', 'value', 'schema', 'max'],\n\n  data() {\n    return {\n      dialogImageUrl: '',\n      dialogVisible: false,\n      fileList: (this.value || []).map((item) => ({\n        ...item,\n        url: item.publicUrl,\n      })),\n      loading: false,\n    };\n  },\n\n  computed: {\n    isFull() {\n      const hasInputReference = !!this.$refs.files;\n\n      return (\n        (this.max &&\n          (hasInputReference &&\n            this.$refs.files.uploadFiles.length >=\n              this.max)) ||\n        (!hasInputReference &&\n          (this.value || []).length >= this.max)\n      );\n    },\n\n    accept() {\n      return 'image/*';\n    },\n  },\n\n  methods: {\n    async uploadFromRequest(request) {\n      this.loading = true;\n      return FileUploader.uploadFromRequest(\n        this.path,\n        request,\n        this.schema,\n      );\n    },\n\n    onSuccess(file) {\n      if (!file) {\n        return;\n      }\n\n      this.$emit('input', [...(this.value || []), file]);\n      this.loading = false;\n    },\n\n    onError(error) {\n      Errors.showMessage(error);\n      this.loading = false;\n    },\n\n    onRemove(file) {\n      if (!file) {\n        return;\n      }\n\n      const id = file.response ? file.response.id : file.id;\n\n      this.$emit(\n        'input',\n        (this.value || []).filter(\n          (item) => item.id !== id,\n        ),\n      );\n    },\n\n    handlePictureCardPreview(file) {\n      this.dialogImageUrl = file.url;\n      this.dialogVisible = true;\n    },\n  },\n};\n",{"version":3,"sources":["image-upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"image-upload.vue","sourceRoot":"src/shared/form","sourcesContent":["<template>\n  <div>\n    <el-upload\n      :accept=\"accept\"\n      :class=\"{ 'image-upload-hide-upload': isFull || loading }\"\n      :file-list=\"fileList\"\n      :http-request=\"uploadFromRequest\"\n      :on-error=\"onError\"\n      :on-preview=\"handlePictureCardPreview\"\n      :on-remove=\"onRemove\"\n      :on-success=\"onSuccess\"\n      action\n      list-type=\"picture-card\"\n      ref=\"files\"\n    >\n      <i class=\"el-icon-plus\"></i>\n    </el-upload>\n\n    <el-dialog :visible.sync=\"dialogVisible\">\n      <img :src=\"dialogImageUrl\" alt width=\"100%\">\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { FileUploader } from '@/shared/file-upload/file-uploader';\nimport Errors from '@/shared/error/errors';\n\nexport default {\n  name: 'app-image-upload',\n  props: ['path', 'value', 'schema', 'max'],\n\n  data() {\n    return {\n      dialogImageUrl: '',\n      dialogVisible: false,\n      fileList: (this.value || []).map((item) => ({\n        ...item,\n        url: item.publicUrl,\n      })),\n      loading: false,\n    };\n  },\n\n  computed: {\n    isFull() {\n      const hasInputReference = !!this.$refs.files;\n\n      return (\n        (this.max &&\n          (hasInputReference &&\n            this.$refs.files.uploadFiles.length >=\n              this.max)) ||\n        (!hasInputReference &&\n          (this.value || []).length >= this.max)\n      );\n    },\n\n    accept() {\n      return 'image/*';\n    },\n  },\n\n  methods: {\n    async uploadFromRequest(request) {\n      this.loading = true;\n      return FileUploader.uploadFromRequest(\n        this.path,\n        request,\n        this.schema,\n      );\n    },\n\n    onSuccess(file) {\n      if (!file) {\n        return;\n      }\n\n      this.$emit('input', [...(this.value || []), file]);\n      this.loading = false;\n    },\n\n    onError(error) {\n      Errors.showMessage(error);\n      this.loading = false;\n    },\n\n    onRemove(file) {\n      if (!file) {\n        return;\n      }\n\n      const id = file.response ? file.response.id : file.id;\n\n      this.$emit(\n        'input',\n        (this.value || []).filter(\n          (item) => item.id !== id,\n        ),\n      );\n    },\n\n    handlePictureCardPreview(file) {\n      this.dialogImageUrl = file.url;\n      this.dialogVisible = true;\n    },\n  },\n};\n</script>\n\n<style>\n.image-upload-hide-upload .el-upload--picture-card {\n  display: none !important;\n}\n</style>\n"]}]}