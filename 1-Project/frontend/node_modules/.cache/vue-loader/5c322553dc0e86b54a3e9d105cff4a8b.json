{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\autocomplete-one-input.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\autocomplete-one-input.vue","mtime":1641838499528},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1641838768457}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { debounce, isString } from 'lodash';\n\nexport default {\n  name: 'app-autocomplete-one-input',\n\n  props: {\n    value: {\n      type: Object,\n    },\n    fetchFn: {\n      type: Function,\n    },\n    clientSideSearch: {\n      type: Boolean,\n      default: false,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      serverSideDataSource: [],\n      clientSideDataSource: [],\n      currentQuery: 'NOT_INITIALIZED',\n      debouncedSearch: () => {},\n    };\n  },\n\n  mounted() {\n    this.debouncedSearch = debounce(\n      this.handleSearch.bind(this),\n      300,\n    );\n\n    // Fetch first results\n    this.handleSearch('');\n  },\n\n  computed: {\n    initialOption() {\n      if (\n        this.value &&\n        !this.dataSource\n          .map((item) => item.id)\n          .includes(this.value.id)\n      ) {\n        return this.value;\n      }\n\n      return null;\n    },\n\n    dataSource() {\n      if (this.clientSideSearch) {\n        return this.clientSideDataSource;\n      }\n\n      return this.serverSideDataSource;\n    },\n  },\n\n  methods: {\n    onChange(value) {\n      this.$emit('input', value || null);\n    },\n\n    async handleSearch(value) {\n      if (!isString(value)) {\n        return;\n      }\n\n      if (this.clientSideSearch) {\n        return this.handleSearchClient(value);\n      }\n\n      return this.handleSearchServer(value);\n    },\n\n    async handleSearchClient(value) {\n      if (\n        !this.serverSideDataSource ||\n        !this.serverSideDataSource.length\n      ) {\n        await this.handleSearchServer();\n      }\n\n      this.clientSideDataSource = this.serverSideDataSource.filter(\n        (item) =>\n          String(item.label || '')\n            .toLowerCase()\n            .includes(String(value || '').toLowerCase()),\n      );\n\n      this.loading = false;\n    },\n\n    async handleSearchServer(value) {\n      if (value === this.currentQuery) {\n        return;\n      }\n\n      this.currentQuery = value;\n      this.loading = true;\n\n      try {\n        const serverSideDataSource = await this.fetchFn(\n          value,\n          10,\n        );\n        if (this.currentQuery === value) {\n          this.serverSideDataSource = serverSideDataSource;\n          this.loading = false;\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (this.currentQuery === value) {\n          this.serverSideDataSource = [];\n          this.loading = false;\n        }\n      }\n    },\n  },\n};\n",{"version":3,"sources":["autocomplete-one-input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"autocomplete-one-input.vue","sourceRoot":"src/shared/form","sourcesContent":["<template>\n  <el-select\n    :disabled=\"disabled\"\n    :loading=\"loading\"\n    :remote-method=\"handleSearch\"\n    :value=\"value\"\n    @change=\"onChange\"\n    clearable\n    default-first-option\n    filterable\n    placeholder\n    remote\n    reserve-keyword\n    value-key=\"id\"\n  >\n    <el-option\n      :key=\"initialOption.id\"\n      :label=\"initialOption.label\"\n      :value=\"initialOption\"\n      v-if=\"initialOption\"\n    ></el-option>\n    <el-option :key=\"record.id\" :label=\"record.label\" :value=\"record\" v-for=\"record in dataSource\"></el-option>\n  </el-select>\n</template>\n\n<script>\nimport { debounce, isString } from 'lodash';\n\nexport default {\n  name: 'app-autocomplete-one-input',\n\n  props: {\n    value: {\n      type: Object,\n    },\n    fetchFn: {\n      type: Function,\n    },\n    clientSideSearch: {\n      type: Boolean,\n      default: false,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      serverSideDataSource: [],\n      clientSideDataSource: [],\n      currentQuery: 'NOT_INITIALIZED',\n      debouncedSearch: () => {},\n    };\n  },\n\n  mounted() {\n    this.debouncedSearch = debounce(\n      this.handleSearch.bind(this),\n      300,\n    );\n\n    // Fetch first results\n    this.handleSearch('');\n  },\n\n  computed: {\n    initialOption() {\n      if (\n        this.value &&\n        !this.dataSource\n          .map((item) => item.id)\n          .includes(this.value.id)\n      ) {\n        return this.value;\n      }\n\n      return null;\n    },\n\n    dataSource() {\n      if (this.clientSideSearch) {\n        return this.clientSideDataSource;\n      }\n\n      return this.serverSideDataSource;\n    },\n  },\n\n  methods: {\n    onChange(value) {\n      this.$emit('input', value || null);\n    },\n\n    async handleSearch(value) {\n      if (!isString(value)) {\n        return;\n      }\n\n      if (this.clientSideSearch) {\n        return this.handleSearchClient(value);\n      }\n\n      return this.handleSearchServer(value);\n    },\n\n    async handleSearchClient(value) {\n      if (\n        !this.serverSideDataSource ||\n        !this.serverSideDataSource.length\n      ) {\n        await this.handleSearchServer();\n      }\n\n      this.clientSideDataSource = this.serverSideDataSource.filter(\n        (item) =>\n          String(item.label || '')\n            .toLowerCase()\n            .includes(String(value || '').toLowerCase()),\n      );\n\n      this.loading = false;\n    },\n\n    async handleSearchServer(value) {\n      if (value === this.currentQuery) {\n        return;\n      }\n\n      this.currentQuery = value;\n      this.loading = true;\n\n      try {\n        const serverSideDataSource = await this.fetchFn(\n          value,\n          10,\n        );\n        if (this.currentQuery === value) {\n          this.serverSideDataSource = serverSideDataSource;\n          this.loading = false;\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (this.currentQuery === value) {\n          this.serverSideDataSource = [];\n          this.loading = false;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style>\n</style>\n"]}]}