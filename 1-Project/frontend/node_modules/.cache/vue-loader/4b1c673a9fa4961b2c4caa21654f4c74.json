{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\file-upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\file-upload.vue","mtime":1641838499549},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1641838768457}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { FileUploader } from '@/shared/file-upload/file-uploader';\nimport Errors from '@/shared/error/errors';\n\nexport default {\n  name: 'app-file-upload',\n  props: ['path', 'value', 'schema', 'max'],\n\n  data() {\n    return {\n      fileList: (this.value || []).map((item) => ({\n        ...item,\n        url: item.publicUrl,\n      })),\n      loading: false,\n    };\n  },\n\n  computed: {\n    isFull() {\n      const hasInputReference = !!this.$refs.files;\n\n      return (\n        (this.max &&\n          (hasInputReference &&\n            this.$refs.files.uploadFiles.length >=\n              this.max)) ||\n        (!hasInputReference &&\n          (this.value || []).length >= this.max)\n      );\n    },\n\n    accept() {\n      return this.schema && this.schema.formats\n        ? this.schema.formats\n            .map((format) => `.${format}`)\n            .join(',')\n        : undefined;\n    },\n  },\n\n  methods: {\n    async uploadFromRequest(request) {\n      this.loading = true;\n      return FileUploader.uploadFromRequest(\n        this.path,\n        request,\n        this.schema,\n      );\n    },\n\n    onSuccess(file) {\n      if (!file) {\n        return;\n      }\n\n      this.$emit('input', [...(this.value || []), file]);\n      this.loading = false;\n    },\n\n    onError(error) {\n      Errors.showMessage(error);\n      this.loading = false;\n    },\n\n    onRemove(file, files) {\n      this.$emit(\n        'input',\n        (this.value || []).filter((item) =>\n          files.some((file) =>\n            file.response\n              ? file.response.id === item.id\n              : file.id === item.id,\n          ),\n        ),\n      );\n    },\n\n    download(file) {\n      window.open(file.url, '_blank');\n    },\n  },\n};\n",{"version":3,"sources":["file-upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"file-upload.vue","sourceRoot":"src/shared/form","sourcesContent":["<template>\n  <div>\n    <el-upload\n      :accept=\"accept\"\n      :file-list=\"fileList\"\n      :http-request=\"uploadFromRequest\"\n      :limit=\"max\"\n      :on-error=\"onError\"\n      :on-preview=\"download\"\n      :on-remove=\"onRemove\"\n      :on-success=\"onSuccess\"\n      action\n      ref=\"files\"\n    >\n      <el-button :disabled=\"loading || isFull\" size=\"small\" type=\"primary\">\n        <app-i18n code=\"fileUploader.upload\"></app-i18n>\n      </el-button>\n    </el-upload>\n  </div>\n</template>\n\n<script>\nimport { FileUploader } from '@/shared/file-upload/file-uploader';\nimport Errors from '@/shared/error/errors';\n\nexport default {\n  name: 'app-file-upload',\n  props: ['path', 'value', 'schema', 'max'],\n\n  data() {\n    return {\n      fileList: (this.value || []).map((item) => ({\n        ...item,\n        url: item.publicUrl,\n      })),\n      loading: false,\n    };\n  },\n\n  computed: {\n    isFull() {\n      const hasInputReference = !!this.$refs.files;\n\n      return (\n        (this.max &&\n          (hasInputReference &&\n            this.$refs.files.uploadFiles.length >=\n              this.max)) ||\n        (!hasInputReference &&\n          (this.value || []).length >= this.max)\n      );\n    },\n\n    accept() {\n      return this.schema && this.schema.formats\n        ? this.schema.formats\n            .map((format) => `.${format}`)\n            .join(',')\n        : undefined;\n    },\n  },\n\n  methods: {\n    async uploadFromRequest(request) {\n      this.loading = true;\n      return FileUploader.uploadFromRequest(\n        this.path,\n        request,\n        this.schema,\n      );\n    },\n\n    onSuccess(file) {\n      if (!file) {\n        return;\n      }\n\n      this.$emit('input', [...(this.value || []), file]);\n      this.loading = false;\n    },\n\n    onError(error) {\n      Errors.showMessage(error);\n      this.loading = false;\n    },\n\n    onRemove(file, files) {\n      this.$emit(\n        'input',\n        (this.value || []).filter((item) =>\n          files.some((file) =>\n            file.response\n              ? file.response.id === item.id\n              : file.id === item.id,\n          ),\n        ),\n      );\n    },\n\n    download(file) {\n      window.open(file.url, '_blank');\n    },\n  },\n};\n</script>\n"]}]}