{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\modules\\loan\\components\\loan-form-page.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\modules\\loan\\components\\loan-form-page.vue","mtime":1641838498333},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1641838768457}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapActions } from 'vuex';\nimport { FormSchema } from '@/shared/form/form-schema';\nimport { LoanModel } from '@/modules/loan/loan-model';\n\nconst { fields } = LoanModel;\nconst formSchema = new FormSchema([\n  fields.id,\n  fields.book,\n  fields.member,\n  fields.issueDate,\n  fields.dueDate,\n  fields.returnDate,\n  fields.status,\n]);\n\nexport default {\n  name: 'app-loan-form-page',\n\n  props: ['id'],\n\n  data() {\n    return {\n      rules: formSchema.rules(),\n      model: null,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      labelPosition: 'layout/labelPosition',\n      labelWidthForm: 'layout/labelWidthForm',\n      record: 'loan/form/record',\n      findLoading: 'loan/form/findLoading',\n      saveLoading: 'loan/form/saveLoading',\n    }),\n\n    isEditing() {\n      return !!this.id;\n    },\n\n    fields() {\n      return fields;\n    },\n  },\n\n  async created() {\n    if (this.isEditing) {\n      await this.doFind(this.id);\n    } else {\n      await this.doNew();\n    }\n\n    this.model = formSchema.initialValues(this.record);\n  },\n\n  methods: {\n    ...mapActions({\n      doFind: 'loan/form/doFind',\n      doNew: 'loan/form/doNew',\n      doUpdate: 'loan/form/doUpdate',\n      doCreate: 'loan/form/doCreate',\n    }),\n\n    doReset() {\n      this.model = formSchema.initialValues(this.record);\n    },\n\n    async doSubmit() {\n      try {\n        await this.$refs.form.validate();\n      } catch (error) {\n        return;\n      }\n\n      const { id, ...values } = formSchema.cast(this.model);\n\n      if (this.isEditing) {\n        return this.doUpdate({\n          id,\n          values,\n        });\n      } else {\n        return this.doCreate(values);\n      }\n    },\n  },\n};\n",{"version":3,"sources":["loan-form-page.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"loan-form-page.vue","sourceRoot":"src/modules/loan/components","sourcesContent":["<template>\n  <div>\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/' }\">\n        <app-i18n code=\"home.menu\"></app-i18n>\n      </el-breadcrumb-item>\n      <el-breadcrumb-item :to=\"{ path: '/loan' }\">\n        <app-i18n code=\"entities.loan.menu\"></app-i18n>\n      </el-breadcrumb-item>\n      <el-breadcrumb-item>\n        <app-i18n code=\"entities.loan.edit.title\" v-if=\"isEditing\"></app-i18n>\n        <app-i18n code=\"entities.loan.new.title\" v-if=\"!isEditing\"></app-i18n>\n      </el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <div class=\"app-content-page\">\n      <h1 class=\"app-content-title\">\n        <app-i18n code=\"entities.loan.edit.title\" v-if=\"isEditing\"></app-i18n>\n        <app-i18n code=\"entities.loan.new.title\" v-if=\"!isEditing\"></app-i18n>\n      </h1>\n\n      <div class=\"app-page-spinner\" v-if=\"findLoading\" v-loading=\"findLoading\"></div>\n\n      <el-form\n        :label-position=\"labelPosition\"\n        :label-width=\"labelWidthForm\"\n        :model=\"model\"\n        :rules=\"rules\"\n        @submit.native.prevent=\"doSubmit\"\n        class=\"form\"\n        ref=\"form\"\n        v-if=\"model\"\n      >\n        <el-form-item :label=\"fields.id.label\" :prop=\"fields.id.name\" v-if=\"isEditing\">\n          <el-col :lg=\"11\" :md=\"16\" :sm=\"24\">\n            <el-input :disabled=\"true\" v-model=\"model[fields.id.name]\"/>\n          </el-col>\n        </el-form-item>\n\n        <el-form-item\n          :label=\"fields.book.label\"\n          :prop=\"fields.book.name\"\n          :required=\"fields.book.required\"\n        >\n          <el-col :lg=\"11\" :md=\"16\" :sm=\"24\">\n            <app-autocomplete-one-input\n              :fetchFn=\"fields.book.fetchFn\"\n              v-model=\"model[fields.book.name]\"\n            ></app-autocomplete-one-input>\n          </el-col>\n        </el-form-item>\n\n        <el-form-item\n          :label=\"fields.member.label\"\n          :prop=\"fields.member.name\"\n          :required=\"fields.member.required\"\n        >\n          <el-col :lg=\"11\" :md=\"16\" :sm=\"24\">\n            <app-autocomplete-one-input\n              :fetchFn=\"fields.member.fetchFn\"\n              v-model=\"model[fields.member.name]\"\n            ></app-autocomplete-one-input>\n          </el-col>\n        </el-form-item>\n\n        <el-form-item\n          :label=\"fields.issueDate.label\"\n          :prop=\"fields.issueDate.name\"\n          :required=\"fields.issueDate.required\"\n        >\n          <el-col :lg=\"11\" :md=\"16\" :sm=\"24\">\n            <el-date-picker placeholder type=\"datetime\" v-model=\"model[fields.issueDate.name]\"></el-date-picker>\n          </el-col>\n        </el-form-item>\n\n        <el-form-item\n          :label=\"fields.dueDate.label\"\n          :prop=\"fields.dueDate.name\"\n          :required=\"fields.dueDate.required\"\n        >\n          <el-col :lg=\"11\" :md=\"16\" :sm=\"24\">\n            <el-date-picker placeholder type=\"datetime\" v-model=\"model[fields.dueDate.name]\"></el-date-picker>\n          </el-col>\n        </el-form-item>\n\n        <el-form-item\n          :label=\"fields.returnDate.label\"\n          :prop=\"fields.returnDate.name\"\n          :required=\"fields.returnDate.required\"\n        >\n          <el-col :lg=\"11\" :md=\"16\" :sm=\"24\">\n            <el-date-picker placeholder type=\"datetime\" v-model=\"model[fields.returnDate.name]\"></el-date-picker>\n          </el-col>\n        </el-form-item>\n\n        <el-form-item\n          :label=\"fields.status.label\"\n          :prop=\"fields.status.name\"\n          :required=\"fields.status.required\"\n        >\n          <el-col :lg=\"11\" :md=\"16\" :sm=\"24\">\n            <el-select placeholder v-model=\"model[fields.status.name]\">\n              <el-option :value=\"undefined\">--</el-option>\n              <el-option\n                :key=\"option.id\"\n                :label=\"option.label\"\n                :value=\"option.id\"\n                v-for=\"option in fields.status.options\"\n              ></el-option>\n            </el-select>\n          </el-col>\n        </el-form-item>\n\n        <el-form-item>\n          <div class=\"form-buttons\">\n            <el-button\n              :disabled=\"saveLoading\"\n              @click=\"doSubmit\"\n              icon=\"el-icon-fa-floppy-o\"\n              type=\"primary\"\n            >\n              <app-i18n code=\"common.save\"></app-i18n>\n            </el-button>\n\n            <el-button :disabled=\"saveLoading\" @click=\"doReset\" icon=\"el-icon-fa-undo\">\n              <app-i18n code=\"common.reset\"></app-i18n>\n            </el-button>\n          </div>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport { FormSchema } from '@/shared/form/form-schema';\nimport { LoanModel } from '@/modules/loan/loan-model';\n\nconst { fields } = LoanModel;\nconst formSchema = new FormSchema([\n  fields.id,\n  fields.book,\n  fields.member,\n  fields.issueDate,\n  fields.dueDate,\n  fields.returnDate,\n  fields.status,\n]);\n\nexport default {\n  name: 'app-loan-form-page',\n\n  props: ['id'],\n\n  data() {\n    return {\n      rules: formSchema.rules(),\n      model: null,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      labelPosition: 'layout/labelPosition',\n      labelWidthForm: 'layout/labelWidthForm',\n      record: 'loan/form/record',\n      findLoading: 'loan/form/findLoading',\n      saveLoading: 'loan/form/saveLoading',\n    }),\n\n    isEditing() {\n      return !!this.id;\n    },\n\n    fields() {\n      return fields;\n    },\n  },\n\n  async created() {\n    if (this.isEditing) {\n      await this.doFind(this.id);\n    } else {\n      await this.doNew();\n    }\n\n    this.model = formSchema.initialValues(this.record);\n  },\n\n  methods: {\n    ...mapActions({\n      doFind: 'loan/form/doFind',\n      doNew: 'loan/form/doNew',\n      doUpdate: 'loan/form/doUpdate',\n      doCreate: 'loan/form/doCreate',\n    }),\n\n    doReset() {\n      this.model = formSchema.initialValues(this.record);\n    },\n\n    async doSubmit() {\n      try {\n        await this.$refs.form.validate();\n      } catch (error) {\n        return;\n      }\n\n      const { id, ...values } = formSchema.cast(this.model);\n\n      if (this.isEditing) {\n        return this.doUpdate({\n          id,\n          values,\n        });\n      } else {\n        return this.doCreate(values);\n      }\n    },\n  },\n};\n</script>\n\n<style>\n</style>\n"]}]}