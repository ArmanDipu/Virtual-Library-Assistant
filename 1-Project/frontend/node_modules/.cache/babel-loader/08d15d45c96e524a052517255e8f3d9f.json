{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\importer\\importer-store.js","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\importer\\importer-store.js","mtime":1641838499828},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\babel.config.js","mtime":1641838494433},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1641838766164}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _typeof from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\typeof.js\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _toConsumableArray from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport \"core-js/modules/es6.array.find\";\nimport _asyncToGenerator from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Errors from '@/shared/error/errors';\nimport { i18n } from '@/i18n';\nimport importerStatuses from '@/shared/importer/importer-statuses';\nimport Importer from '@/shared/importer/importer';\nimport { EXCEL_TYPE } from '@/shared/excel/excel';\nimport { chunk } from 'lodash';\nimport md5 from 'md5';\n\nfunction importRow(_x, _x2, _x3, _x4) {\n  return _importRow.apply(this, arguments);\n}\n\nfunction _importRow() {\n  _importRow = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(commit, importer, importFn, row) {\n    var importableRow, importHash;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return importer.castForImport(row);\n\n          case 3:\n            importableRow = _context5.sent;\n            importHash = md5(JSON.stringify(importableRow));\n            _context5.next = 7;\n            return importFn(importableRow, importHash);\n\n          case 7:\n            commit('IMPORT_BATCH_SUCCESS', {\n              line: row._line\n            });\n            _context5.next = 13;\n            break;\n\n          case 10:\n            _context5.prev = 10;\n            _context5.t0 = _context5[\"catch\"](0);\n            commit('IMPORT_BATCH_ERROR', {\n              line: row._line,\n              errorMessage: Errors.selectMessage(_context5.t0)\n            });\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 10]]);\n  }));\n  return _importRow.apply(this, arguments);\n}\n\nexport default (function (importFn, importFields, templateFileName, importerHint) {\n  var batchSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 10;\n  return {\n    namespaced: true,\n    state: {\n      rows: null,\n      errorMessage: null,\n      importing: false,\n      completed: false\n    },\n    getters: {\n      rows: function rows(state) {\n        return state.rows || [];\n      },\n      hasRows: function hasRows(state, getters) {\n        return !!getters.rows.length;\n      },\n      errorMessage: function errorMessage(state) {\n        return state.errorMessage;\n      },\n      pendingRows: function pendingRows(state, getters) {\n        return getters.rows.filter(function (row) {\n          return row._status === importerStatuses.PENDING;\n        });\n      },\n      pendingRowsCount: function pendingRowsCount(state, getters) {\n        return getters.pendingRows.length;\n      },\n      rowsCount: function rowsCount(state, getters) {\n        return getters.rows.length;\n      },\n      importedRowsCount: function importedRowsCount(state, getters) {\n        return getters.rows.filter(function (row) {\n          return row._status === importerStatuses.IMPORTED;\n        }).length;\n      },\n      nonPendingRowsCount: function nonPendingRowsCount(state, getters) {\n        return getters.rowsCount - getters.pendingRowsCount;\n      },\n      errorRowsCount: function errorRowsCount(state, getters) {\n        return getters.rows.filter(function (row) {\n          return row._status === importerStatuses.ERROR;\n        }).length;\n      },\n      importing: function importing(state) {\n        return !!state.importing;\n      },\n      completed: function completed(state) {\n        return !!state.completed;\n      },\n      percent: function percent(state, getters) {\n        return Math.round(getters.nonPendingRowsCount * 100 / getters.rowsCount);\n      },\n      fields: function fields() {\n        return importFields;\n      },\n      hint: function hint() {\n        return importerHint;\n      }\n    },\n    mutations: {\n      RESETED: function RESETED(state) {\n        state.rows = null;\n        state.errorMessage = null;\n        state.importing = false;\n        state.completed = false;\n      },\n      FILE_READ_ERROR: function FILE_READ_ERROR(state, payload) {\n        state.errorMessage = payload.message ? payload.message : payload;\n      },\n      FILE_READ_SUCCESS: function FILE_READ_SUCCESS(state, payload) {\n        state.errorMessage = null;\n        state.rows = payload;\n      },\n      IMPORT_STARTED: function IMPORT_STARTED(state) {\n        state.importing = true;\n      },\n      IMPORT_PAUSED: function IMPORT_PAUSED(state) {\n        state.importing = false;\n      },\n      IMPORT_SUCCESS: function IMPORT_SUCCESS(state) {\n        state.importing = false;\n        state.completed = true;\n      },\n      IMPORT_ERROR: function IMPORT_ERROR(state) {\n        state.importing = false;\n      },\n      IMPORT_BATCH_SUCCESS: function IMPORT_BATCH_SUCCESS(state, payload) {\n        var item = (state.rows || []).find(function (item) {\n          return item._line === payload.line;\n        });\n\n        if (!item) {\n          return;\n        }\n\n        item._status = importerStatuses.IMPORTED;\n        state.rows = _toConsumableArray(state.rows);\n      },\n      IMPORT_BATCH_ERROR: function IMPORT_BATCH_ERROR(state, payload) {\n        var item = (state.rows || []).find(function (item) {\n          return item._line === payload.line;\n        });\n\n        if (!item) {\n          return;\n        }\n\n        item._status = importerStatuses.ERROR;\n        item._errorMessage = payload.errorMessage;\n        state.rows = _toConsumableArray(state.rows);\n      }\n    },\n    actions: {\n      doReset: function doReset(_ref) {\n        var commit = _ref.commit;\n        commit('RESETED');\n      },\n      doPause: function doPause(_ref2) {\n        var commit = _ref2.commit;\n        commit('IMPORT_PAUSED');\n      },\n      doImport: function () {\n        var _doImport = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {\n          var commit, getters, _ret;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  commit = _ref3.commit, getters = _ref3.getters;\n                  _context2.prev = 1;\n                  return _context2.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                    var pendingRows, importer, pendingBatches, _iterator, _step, batch, paused;\n\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            commit('IMPORT_STARTED');\n                            pendingRows = getters.pendingRows;\n                            importer = new Importer(importFields);\n                            pendingBatches = chunk(pendingRows, batchSize);\n                            _iterator = _createForOfIteratorHelper(pendingBatches);\n                            _context.prev = 5;\n\n                            _iterator.s();\n\n                          case 7:\n                            if ((_step = _iterator.n()).done) {\n                              _context.next = 16;\n                              break;\n                            }\n\n                            batch = _step.value;\n                            paused = !getters.importing;\n\n                            if (!paused) {\n                              _context.next = 12;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", {\n                              v: void 0\n                            });\n\n                          case 12:\n                            _context.next = 14;\n                            return Promise.all(batch.map(function (row) {\n                              return importRow(commit, importer, importFn, row);\n                            }));\n\n                          case 14:\n                            _context.next = 7;\n                            break;\n\n                          case 16:\n                            _context.next = 21;\n                            break;\n\n                          case 18:\n                            _context.prev = 18;\n                            _context.t0 = _context[\"catch\"](5);\n\n                            _iterator.e(_context.t0);\n\n                          case 21:\n                            _context.prev = 21;\n\n                            _iterator.f();\n\n                            return _context.finish(21);\n\n                          case 24:\n                            commit('IMPORT_SUCCESS');\n\n                          case 25:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[5, 18, 21, 24]]);\n                  })(), \"t0\", 3);\n\n                case 3:\n                  _ret = _context2.t0;\n\n                  if (!(_typeof(_ret) === \"object\")) {\n                    _context2.next = 6;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", _ret.v);\n\n                case 6:\n                  _context2.next = 12;\n                  break;\n\n                case 8:\n                  _context2.prev = 8;\n                  _context2.t1 = _context2[\"catch\"](1);\n                  Errors.handle(_context2.t1);\n                  commit('IMPORT_ERROR');\n\n                case 12:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[1, 8]]);\n        }));\n\n        function doImport(_x5) {\n          return _doImport.apply(this, arguments);\n        }\n\n        return doImport;\n      }(),\n      doDownloadTemplate: function doDownloadTemplate() {\n        var importer = new Importer(importFields);\n        importer.downloadTemplate(templateFileName);\n      },\n      doReadFile: function () {\n        var _doReadFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref4, file) {\n          var commit, isExcel, importer, rawData;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  commit = _ref4.commit;\n                  _context4.prev = 1;\n                  isExcel = file.type === EXCEL_TYPE;\n\n                  if (isExcel) {\n                    _context4.next = 5;\n                    break;\n                  }\n\n                  throw new Error(i18n('importer.errors.invalidFileExcel'));\n\n                case 5:\n                  importer = new Importer(importFields);\n                  _context4.next = 8;\n                  return importer.convertExcelFileToJson(file);\n\n                case 8:\n                  rawData = _context4.sent;\n\n                  if (!(!rawData || !rawData.length)) {\n                    _context4.next = 11;\n                    break;\n                  }\n\n                  throw new Error(i18n('importer.errors.invalidFileEmpty'));\n\n                case 11:\n                  _context4.next = 13;\n                  return Promise.all(rawData.map( /*#__PURE__*/function () {\n                    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(row, index) {\n                      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return importer.castForDisplay(row, index);\n\n                            case 2:\n                              return _context3.abrupt(\"return\", _context3.sent);\n\n                            case 3:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n\n                    return function (_x8, _x9) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }()));\n\n                case 13:\n                  rawData = _context4.sent;\n                  commit('FILE_READ_SUCCESS', rawData);\n                  _context4.next = 21;\n                  break;\n\n                case 17:\n                  _context4.prev = 17;\n                  _context4.t0 = _context4[\"catch\"](1);\n                  console.error(_context4.t0);\n                  commit('FILE_READ_ERROR', _context4.t0);\n\n                case 21:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[1, 17]]);\n        }));\n\n        function doReadFile(_x6, _x7) {\n          return _doReadFile.apply(this, arguments);\n        }\n\n        return doReadFile;\n      }()\n    }\n  };\n});",{"version":3,"sources":["E:/Projects/vue-library-master/1-Project/frontend/src/shared/importer/importer-store.js"],"names":["Errors","i18n","importerStatuses","Importer","EXCEL_TYPE","chunk","md5","importRow","commit","importer","importFn","row","castForImport","importableRow","importHash","JSON","stringify","line","_line","errorMessage","selectMessage","importFields","templateFileName","importerHint","batchSize","namespaced","state","rows","importing","completed","getters","hasRows","length","pendingRows","filter","_status","PENDING","pendingRowsCount","rowsCount","importedRowsCount","IMPORTED","nonPendingRowsCount","errorRowsCount","ERROR","percent","Math","round","fields","hint","mutations","RESETED","FILE_READ_ERROR","payload","message","FILE_READ_SUCCESS","IMPORT_STARTED","IMPORT_PAUSED","IMPORT_SUCCESS","IMPORT_ERROR","IMPORT_BATCH_SUCCESS","item","find","IMPORT_BATCH_ERROR","_errorMessage","actions","doReset","doPause","doImport","pendingBatches","batch","paused","Promise","all","map","handle","doDownloadTemplate","downloadTemplate","doReadFile","file","isExcel","type","Error","convertExcelFileToJson","rawData","index","castForDisplay","console","error"],"mappings":"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","sourcesContent":["import Errors from '@/shared/error/errors';\nimport { i18n } from '@/i18n';\nimport importerStatuses from '@/shared/importer/importer-statuses';\nimport Importer from '@/shared/importer/importer';\nimport { EXCEL_TYPE } from '@/shared/excel/excel';\nimport { chunk } from 'lodash';\nimport md5 from 'md5';\n\nasync function importRow(commit, importer, importFn, row) {\n  try {\n    const importableRow = await importer.castForImport(row);\n    const importHash = md5(JSON.stringify(importableRow));\n    await importFn(importableRow, importHash);\n\n    commit('IMPORT_BATCH_SUCCESS', {\n      line: row._line,\n    });\n  } catch (error) {\n    commit('IMPORT_BATCH_ERROR', {\n      line: row._line,\n      errorMessage: Errors.selectMessage(error),\n    });\n  }\n}\n\nexport default (\n  importFn,\n  importFields,\n  templateFileName,\n  importerHint,\n  batchSize = 10,\n) => ({\n  namespaced: true,\n\n  state: {\n    rows: null,\n    errorMessage: null,\n    importing: false,\n    completed: false,\n  },\n\n  getters: {\n    rows: (state) => state.rows || [],\n\n    hasRows: (state, getters) => !!getters.rows.length,\n\n    errorMessage: (state) => state.errorMessage,\n\n    pendingRows: (state, getters) =>\n      getters.rows.filter(\n        (row) => row._status === importerStatuses.PENDING,\n      ),\n\n    pendingRowsCount: (state, getters) =>\n      getters.pendingRows.length,\n\n    rowsCount: (state, getters) => getters.rows.length,\n\n    importedRowsCount: (state, getters) =>\n      getters.rows.filter(\n        (row) => row._status === importerStatuses.IMPORTED,\n      ).length,\n\n    nonPendingRowsCount: (state, getters) =>\n      getters.rowsCount - getters.pendingRowsCount,\n\n    errorRowsCount: (state, getters) =>\n      getters.rows.filter(\n        (row) => row._status === importerStatuses.ERROR,\n      ).length,\n\n    importing: (state) => !!state.importing,\n\n    completed: (state) => !!state.completed,\n\n    percent: (state, getters) =>\n      Math.round(\n        (getters.nonPendingRowsCount * 100) /\n          getters.rowsCount,\n      ),\n\n    fields: () => importFields,\n\n    hint: () => importerHint,\n  },\n\n  mutations: {\n    RESETED(state) {\n      state.rows = null;\n      state.errorMessage = null;\n      state.importing = false;\n      state.completed = false;\n    },\n\n    FILE_READ_ERROR(state, payload) {\n      state.errorMessage = payload.message\n        ? payload.message\n        : payload;\n    },\n\n    FILE_READ_SUCCESS(state, payload) {\n      state.errorMessage = null;\n      state.rows = payload;\n    },\n\n    IMPORT_STARTED(state) {\n      state.importing = true;\n    },\n\n    IMPORT_PAUSED(state) {\n      state.importing = false;\n    },\n\n    IMPORT_SUCCESS(state) {\n      state.importing = false;\n      state.completed = true;\n    },\n\n    IMPORT_ERROR(state) {\n      state.importing = false;\n    },\n\n    IMPORT_BATCH_SUCCESS(state, payload) {\n      const item = (state.rows || []).find(\n        (item) => item._line === payload.line,\n      );\n\n      if (!item) {\n        return;\n      }\n\n      item._status = importerStatuses.IMPORTED;\n\n      state.rows = [...state.rows];\n    },\n\n    IMPORT_BATCH_ERROR(state, payload) {\n      const item = (state.rows || []).find(\n        (item) => item._line === payload.line,\n      );\n\n      if (!item) {\n        return;\n      }\n\n      item._status = importerStatuses.ERROR;\n      item._errorMessage = payload.errorMessage;\n\n      state.rows = [...state.rows];\n    },\n  },\n\n  actions: {\n    doReset({ commit }) {\n      commit('RESETED');\n    },\n\n    doPause({ commit }) {\n      commit('IMPORT_PAUSED');\n    },\n\n    async doImport({ commit, getters }) {\n      try {\n        commit('IMPORT_STARTED');\n\n        const pendingRows = getters.pendingRows;\n\n        const importer = new Importer(importFields);\n\n        const pendingBatches = chunk(\n          pendingRows,\n          batchSize,\n        );\n\n        for (let batch of pendingBatches) {\n          const paused = !getters.importing;\n\n          if (paused) {\n            return;\n          }\n\n          await Promise.all(\n            batch.map((row) =>\n              importRow(commit, importer, importFn, row),\n            ),\n          );\n        }\n\n        commit('IMPORT_SUCCESS');\n      } catch (error) {\n        Errors.handle(error);\n        commit('IMPORT_ERROR');\n      }\n    },\n\n    doDownloadTemplate() {\n      const importer = new Importer(importFields);\n      importer.downloadTemplate(templateFileName);\n    },\n\n    async doReadFile({ commit }, file) {\n      try {\n        const isExcel = file.type === EXCEL_TYPE;\n\n        if (!isExcel) {\n          throw new Error(\n            i18n('importer.errors.invalidFileExcel'),\n          );\n        }\n\n        const importer = new Importer(importFields);\n\n        let rawData = await importer.convertExcelFileToJson(\n          file,\n        );\n\n        if (!rawData || !rawData.length) {\n          throw new Error(\n            i18n('importer.errors.invalidFileEmpty'),\n          );\n        }\n\n        rawData = await Promise.all(\n          rawData.map(async (row, index) => {\n            return await importer.castForDisplay(\n              row,\n              index,\n            );\n          }),\n        );\n\n        commit('FILE_READ_SUCCESS', rawData);\n      } catch (error) {\n        console.error(error);\n        commit('FILE_READ_ERROR', error);\n      }\n    },\n  },\n});\n"]}]}