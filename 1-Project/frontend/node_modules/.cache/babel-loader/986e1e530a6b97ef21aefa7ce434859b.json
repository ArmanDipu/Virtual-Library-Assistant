{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\filter-schema.js","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\form\\filter-schema.js","mtime":1641838499572},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\babel.config.js","mtime":1641838494433},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1641838766164}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _defineProperty from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as yup from 'yup';\nimport { values as _values } from 'lodash';\nexport var FilterSchema = /*#__PURE__*/function () {\n  function FilterSchema(fields) {\n    _classCallCheck(this, FilterSchema);\n\n    _defineProperty(this, \"fields\", void 0);\n\n    this.fields = fields;\n  }\n\n  _createClass(FilterSchema, [{\n    key: \"initialValues\",\n    value: function initialValues() {\n      var record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      queryParams = queryParams || {};\n      record = record || {};\n\n      var hasFilterFromQuery = _values(queryParams).some(function (filterValue) {\n        return !!filterValue;\n      });\n\n      if (hasFilterFromQuery) {\n        record = queryParams;\n      }\n\n      var casted = {};\n\n      var _iterator = _createForOfIteratorHelper(this.fields),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n          casted[field.name] = field.forFilterInitialValue(record[field.name]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return casted;\n    }\n  }, {\n    key: \"rules\",\n    value: function rules() {\n      var rules = {};\n      this.fields.forEach(function (field) {\n        rules[field.name] = field.forFilterRules();\n      });\n      return rules;\n    }\n  }, {\n    key: \"castSchema\",\n    value: function castSchema() {\n      var shape = {};\n      this.fields.forEach(function (field) {\n        shape[field.name] = field.forFilterCast();\n      });\n      return yup.object().shape(shape);\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(values) {\n      return this.castSchema().cast(values);\n    }\n  }]);\n\n  return FilterSchema;\n}();",{"version":3,"sources":["E:/Projects/vue-library-master/1-Project/frontend/src/shared/form/filter-schema.js"],"names":["yup","values","_values","FilterSchema","fields","record","queryParams","hasFilterFromQuery","some","filterValue","casted","field","name","forFilterInitialValue","rules","forEach","forFilterRules","shape","forFilterCast","object","castSchema","cast"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAM,IAAIC,OAAnB,QAAkC,QAAlC;AAEA,WAAaC,YAAb;AAGE,wBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;;AALH;AAAA;AAAA,WAOE,yBAA6C;AAAA,UAA/BC,MAA+B,uEAAtB,EAAsB;AAAA,UAAlBC,WAAkB,uEAAJ,EAAI;AAC3CA,MAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B;AACAD,MAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AAEA,UAAME,kBAAkB,GAAGL,OAAO,CAACI,WAAD,CAAP,CAAqBE,IAArB,CACzB,UAACC,WAAD;AAAA,eAAiB,CAAC,CAACA,WAAnB;AAAA,OADyB,CAA3B;;AAIA,UAAIF,kBAAJ,EAAwB;AACtBF,QAAAA,MAAM,GAAGC,WAAT;AACD;;AAED,UAAMI,MAAM,GAAG,EAAf;;AAZ2C,iDAcvB,KAAKN,MAdkB;AAAA;;AAAA;AAc3C,4DAAiC;AAAA,cAAtBO,KAAsB;AAC/BD,UAAAA,MAAM,CAACC,KAAK,CAACC,IAAP,CAAN,GAAqBD,KAAK,CAACE,qBAAN,CACnBR,MAAM,CAACM,KAAK,CAACC,IAAP,CADa,CAArB;AAGD;AAlB0C;AAAA;AAAA;AAAA;AAAA;;AAoB3C,aAAOF,MAAP;AACD;AA5BH;AAAA;AAAA,WA8BE,iBAAQ;AACN,UAAMI,KAAK,GAAG,EAAd;AAEA,WAAKV,MAAL,CAAYW,OAAZ,CAAoB,UAACJ,KAAD,EAAW;AAC7BG,QAAAA,KAAK,CAACH,KAAK,CAACC,IAAP,CAAL,GAAoBD,KAAK,CAACK,cAAN,EAApB;AACD,OAFD;AAIA,aAAOF,KAAP;AACD;AAtCH;AAAA;AAAA,WAwCE,sBAAa;AACX,UAAMG,KAAK,GAAG,EAAd;AAEA,WAAKb,MAAL,CAAYW,OAAZ,CAAoB,UAACJ,KAAD,EAAW;AAC7BM,QAAAA,KAAK,CAACN,KAAK,CAACC,IAAP,CAAL,GAAoBD,KAAK,CAACO,aAAN,EAApB;AACD,OAFD;AAIA,aAAOlB,GAAG,CAACmB,MAAJ,GAAaF,KAAb,CAAmBA,KAAnB,CAAP;AACD;AAhDH;AAAA;AAAA,WAkDE,cAAKhB,MAAL,EAAa;AACX,aAAO,KAAKmB,UAAL,GAAkBC,IAAlB,CAAuBpB,MAAvB,CAAP;AACD;AApDH;;AAAA;AAAA","sourcesContent":["import * as yup from 'yup';\nimport { values as _values } from 'lodash';\n\nexport class FilterSchema {\n  fields;\n\n  constructor(fields) {\n    this.fields = fields;\n  }\n\n  initialValues(record = {}, queryParams = {}) {\n    queryParams = queryParams || {};\n    record = record || {};\n\n    const hasFilterFromQuery = _values(queryParams).some(\n      (filterValue) => !!filterValue,\n    );\n\n    if (hasFilterFromQuery) {\n      record = queryParams;\n    }\n\n    const casted = {};\n\n    for (const field of this.fields) {\n      casted[field.name] = field.forFilterInitialValue(\n        record[field.name],\n      );\n    }\n\n    return casted;\n  }\n\n  rules() {\n    const rules = {};\n\n    this.fields.forEach((field) => {\n      rules[field.name] = field.forFilterRules();\n    });\n\n    return rules;\n  }\n\n  castSchema() {\n    const shape = {};\n\n    this.fields.forEach((field) => {\n      shape[field.name] = field.forFilterCast();\n    });\n\n    return yup.object().shape(shape);\n  }\n\n  cast(values) {\n    return this.castSchema().cast(values);\n  }\n}\n"]}]}