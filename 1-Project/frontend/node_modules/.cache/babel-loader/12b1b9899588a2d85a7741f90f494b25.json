{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\modules\\auth\\auth-store.js","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\modules\\auth\\auth-store.js","mtime":1641838496445},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\babel.config.js","mtime":1641838494433},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1641838766164}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport \"core-js/modules/es6.regexp.split\";\nimport service from '@/modules/auth/auth-service';\nimport Message from '@/shared/message/message';\nimport { i18n } from '@/i18n';\nimport Errors from '@/shared/error/errors';\nimport { routerAsync } from '@/app-module';\nimport ProgressBar from '@/shared/progress-bar/progress-bar';\nimport { AuthToken } from '@/modules/auth/auth-token';\nexport default {\n  namespaced: true,\n  state: {\n    currentUser: null,\n    loadingInit: true,\n    loadingEmailConfirmation: false,\n    loadingPasswordResetEmail: false,\n    loadingVerifyEmail: false,\n    loadingPasswordReset: false,\n    loadingUpdateProfile: false,\n    loading: false\n  },\n  getters: {\n    currentUser: function currentUser(state) {\n      return state.currentUser;\n    },\n    currentUserEmail: function currentUserEmail(state, getters) {\n      return getters.currentUser ? getters.currentUser.email : null;\n    },\n    currentUserFullName: function currentUserFullName(state, getters) {\n      return getters.currentUser ? getters.currentUser.fullName : '';\n    },\n    signedIn: function signedIn(state, getters) {\n      return !!getters.currentUser && !!getters.currentUser.id;\n    },\n    roles: function roles(state, getters) {\n      return getters.currentUser ? getters.currentUser.roles || [] : [];\n    },\n    emptyPermissions: function emptyPermissions(state, getters) {\n      return !getters.roles || !getters.roles.length;\n    },\n    loading: function loading(state) {\n      return !!state.loading;\n    },\n    loadingInit: function loadingInit(state) {\n      return !!state.loadingInit;\n    },\n    loadingEmailConfirmation: function loadingEmailConfirmation(state) {\n      return !!state.loadingEmailConfirmation;\n    },\n    loadingPasswordResetEmail: function loadingPasswordResetEmail(state) {\n      return !!state.loadingPasswordResetEmail;\n    },\n    loadingPasswordReset: function loadingPasswordReset(state) {\n      return !!state.loadingPasswordReset;\n    },\n    loadingVerifyEmail: function loadingVerifyEmail(state) {\n      return !!state.loadingVerifyEmail;\n    },\n    loadingUpdateProfile: function loadingUpdateProfile(state) {\n      return !!state.loadingUpdateProfile;\n    },\n    currentUserNameOrEmailPrefix: function currentUserNameOrEmailPrefix(state, getters) {\n      if (!getters.currentUser) {\n        return null;\n      }\n\n      if (getters.currentUserFullName && getters.currentUserFullName.length < 25) {\n        return getters.currentUserFullName;\n      }\n\n      if (getters.currentUser.firstName) {\n        return getters.currentUser.firstName;\n      }\n\n      return getters.currentUser.email.split('@')[0];\n    },\n    currentUserAvatar: function currentUserAvatar(state, getters) {\n      if (!getters.currentUser || !getters.currentUser.avatars || !getters.currentUser.avatars.length || !getters.currentUser.avatars[0].publicUrl) {\n        return null;\n      }\n\n      return getters.currentUser.avatars[0].publicUrl;\n    }\n  },\n  mutations: {\n    CURRENT_USER_REFRESH_SUCCESS: function CURRENT_USER_REFRESH_SUCCESS(state, payload) {\n      state.currentUser = payload.currentUser || null;\n    },\n    AUTH_START: function AUTH_START(state) {\n      state.loading = true;\n    },\n    AUTH_SUCCESS: function AUTH_SUCCESS(state, payload) {\n      state.currentUser = payload.currentUser || null;\n      state.loading = false;\n    },\n    AUTH_ERROR: function AUTH_ERROR(state) {\n      state.currentUser = null;\n      state.loading = false;\n    },\n    EMAIL_CONFIRMATION_START: function EMAIL_CONFIRMATION_START(state) {\n      state.loadingEmailConfirmation = true;\n    },\n    EMAIL_CONFIRMATION_SUCCESS: function EMAIL_CONFIRMATION_SUCCESS(state) {\n      state.loadingEmailConfirmation = false;\n    },\n    EMAIL_CONFIRMATION_ERROR: function EMAIL_CONFIRMATION_ERROR(state) {\n      state.loadingEmailConfirmation = false;\n    },\n    EMAIL_VERIFY_START: function EMAIL_VERIFY_START(state) {\n      state.loadingVerifyEmail = true;\n    },\n    EMAIL_VERIFY_SUCCESS: function EMAIL_VERIFY_SUCCESS(state) {\n      state.loadingVerifyEmail = false;\n    },\n    EMAIL_VERIFY_ERROR: function EMAIL_VERIFY_ERROR(state) {\n      state.loadingVerifyEmail = false;\n    },\n    PASSWORD_RESET_START: function PASSWORD_RESET_START(state) {\n      state.loadingPasswordReset = true;\n    },\n    PASSWORD_RESET_SUCCESS: function PASSWORD_RESET_SUCCESS(state) {\n      state.loadingPasswordReset = false;\n    },\n    PASSWORD_RESET_ERROR: function PASSWORD_RESET_ERROR(state) {\n      state.loadingPasswordReset = false;\n    },\n    PASSWORD_RESET_EMAIL_START: function PASSWORD_RESET_EMAIL_START(state) {\n      state.loadingPasswordResetEmail = true;\n    },\n    PASSWORD_RESET_EMAIL_SUCCESS: function PASSWORD_RESET_EMAIL_SUCCESS(state) {\n      state.loadingPasswordResetEmail = false;\n    },\n    PASSWORD_RESET_EMAIL_ERROR: function PASSWORD_RESET_EMAIL_ERROR(state) {\n      state.loadingPasswordResetEmail = false;\n    },\n    UPDATE_PROFILE_START: function UPDATE_PROFILE_START(state) {\n      state.loadingUpdateProfile = true;\n    },\n    UPDATE_PROFILE_SUCCESS: function UPDATE_PROFILE_SUCCESS(state) {\n      state.loadingUpdateProfile = false;\n    },\n    UPDATE_PROFILE_ERROR: function UPDATE_PROFILE_ERROR(state) {\n      state.loadingUpdateProfile = false;\n    },\n    AUTH_INIT_SUCCESS: function AUTH_INIT_SUCCESS(state, payload) {\n      state.currentUser = payload.currentUser || null;\n      state.loadingInit = false;\n    },\n    AUTH_INIT_ERROR: function AUTH_INIT_ERROR(state) {\n      state.currentUser = null;\n      state.loadingInit = false;\n    }\n  },\n  actions: {\n    doInit: function () {\n      var _doInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n        var commit, dispatch, token, currentUser;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit, dispatch = _ref.dispatch;\n                _context.prev = 1;\n                _context.next = 4;\n                return AuthToken.get();\n\n              case 4:\n                token = _context.sent;\n                currentUser = null;\n\n                if (!token) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 9;\n                return service.fetchMe();\n\n              case 9:\n                currentUser = _context.sent;\n\n              case 10:\n                commit('AUTH_INIT_SUCCESS', {\n                  currentUser: currentUser\n                });\n                ProgressBar.done();\n                _context.next = 21;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(_context.t0);\n                commit('AUTH_INIT_ERROR');\n                _context.next = 20;\n                return dispatch('doSignout');\n\n              case 20:\n                ProgressBar.done();\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 14]]);\n      }));\n\n      function doInit(_x) {\n        return _doInit.apply(this, arguments);\n      }\n\n      return doInit;\n    }(),\n    doWaitUntilInit: function () {\n      var _doWaitUntilInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2) {\n        var getters;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                getters = _ref2.getters;\n\n                if (getters.loadingInit) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 3:\n                return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                  var waitUntilInitInterval = setInterval(function () {\n                    if (!getters.loadingInit) {\n                      clearInterval(waitUntilInitInterval);\n                      resolve();\n                    }\n                  }, 500);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function doWaitUntilInit(_x2) {\n        return _doWaitUntilInit.apply(this, arguments);\n      }\n\n      return doWaitUntilInit;\n    }(),\n    doSendEmailConfirmation: function () {\n      var _doSendEmailConfirmation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3) {\n        var commit;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref3.commit;\n                _context3.prev = 1;\n                commit('EMAIL_CONFIRMATION_START');\n                _context3.next = 5;\n                return service.sendEmailVerification();\n\n              case 5:\n                Message.success(i18n('auth.verificationEmailSuccess'));\n                commit('EMAIL_CONFIRMATION_SUCCESS');\n                _context3.next = 13;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](1);\n                Errors.handle(_context3.t0);\n                commit('EMAIL_CONFIRMATION_ERROR');\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 9]]);\n      }));\n\n      function doSendEmailConfirmation(_x3) {\n        return _doSendEmailConfirmation.apply(this, arguments);\n      }\n\n      return doSendEmailConfirmation;\n    }(),\n    doSendPasswordResetEmail: function () {\n      var _doSendPasswordResetEmail = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref4, email) {\n        var commit;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref4.commit;\n                _context4.prev = 1;\n                commit('PASSWORD_RESET_EMAIL_START');\n                _context4.next = 5;\n                return service.sendPasswordResetEmail(email);\n\n              case 5:\n                Message.success(i18n('auth.passwordResetEmailSuccess'));\n                commit('PASSWORD_RESET_EMAIL_SUCCESS');\n                _context4.next = 13;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](1);\n                Errors.handle(_context4.t0);\n                commit('PASSWORD_RESET_EMAIL_ERROR');\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 9]]);\n      }));\n\n      function doSendPasswordResetEmail(_x4, _x5) {\n        return _doSendPasswordResetEmail.apply(this, arguments);\n      }\n\n      return doSendPasswordResetEmail;\n    }(),\n    doRegisterEmailAndPassword: function () {\n      var _doRegisterEmailAndPassword = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref5, _ref6) {\n        var commit, email, password, token, currentUser;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                commit = _ref5.commit;\n                email = _ref6.email, password = _ref6.password;\n                _context5.prev = 2;\n                commit('AUTH_START');\n                _context5.next = 6;\n                return service.registerWithEmailAndPassword(email, password);\n\n              case 6:\n                token = _context5.sent;\n                AuthToken.set(token, true);\n                _context5.next = 10;\n                return service.fetchMe();\n\n              case 10:\n                currentUser = _context5.sent;\n                commit('AUTH_SUCCESS', {\n                  currentUser: currentUser\n                });\n                routerAsync().push('/');\n                _context5.next = 21;\n                break;\n\n              case 15:\n                _context5.prev = 15;\n                _context5.t0 = _context5[\"catch\"](2);\n                _context5.next = 19;\n                return service.signout();\n\n              case 19:\n                Errors.handle(_context5.t0);\n                commit('AUTH_ERROR');\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[2, 15]]);\n      }));\n\n      function doRegisterEmailAndPassword(_x6, _x7) {\n        return _doRegisterEmailAndPassword.apply(this, arguments);\n      }\n\n      return doRegisterEmailAndPassword;\n    }(),\n    doSigninWithEmailAndPassword: function () {\n      var _doSigninWithEmailAndPassword = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref7, _ref8) {\n        var commit, email, password, rememberMe, currentUser, token;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                commit = _ref7.commit;\n                email = _ref8.email, password = _ref8.password, rememberMe = _ref8.rememberMe;\n                _context6.prev = 2;\n                commit('AUTH_START');\n                currentUser = null;\n                _context6.next = 7;\n                return service.signinWithEmailAndPassword(email, password, rememberMe);\n\n              case 7:\n                token = _context6.sent;\n                AuthToken.set(token, rememberMe);\n                _context6.next = 11;\n                return service.fetchMe();\n\n              case 11:\n                currentUser = _context6.sent;\n                commit('AUTH_SUCCESS', {\n                  currentUser: currentUser\n                });\n                routerAsync().push('/');\n                _context6.next = 22;\n                break;\n\n              case 16:\n                _context6.prev = 16;\n                _context6.t0 = _context6[\"catch\"](2);\n                _context6.next = 20;\n                return service.signout();\n\n              case 20:\n                Errors.handle(_context6.t0);\n                commit('AUTH_ERROR');\n\n              case 22:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[2, 16]]);\n      }));\n\n      function doSigninWithEmailAndPassword(_x8, _x9) {\n        return _doSigninWithEmailAndPassword.apply(this, arguments);\n      }\n\n      return doSigninWithEmailAndPassword;\n    }(),\n    doSignout: function () {\n      var _doSignout = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_ref9) {\n        var commit;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                commit = _ref9.commit;\n                _context7.prev = 1;\n                commit('AUTH_START');\n                _context7.next = 5;\n                return service.signout();\n\n              case 5:\n                commit('AUTH_SUCCESS', {\n                  currentUser: null\n                });\n                routerAsync().push('/auth/signin');\n                _context7.next = 13;\n                break;\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](1);\n                Errors.handle(_context7.t0);\n                commit('AUTH_ERROR');\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[1, 9]]);\n      }));\n\n      function doSignout(_x10) {\n        return _doSignout.apply(this, arguments);\n      }\n\n      return doSignout;\n    }(),\n    doRefreshCurrentUser: function () {\n      var _doRefreshCurrentUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref10) {\n        var commit, currentUser, token;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                commit = _ref10.commit;\n                _context8.prev = 1;\n                currentUser = null;\n                _context8.next = 5;\n                return AuthToken.get();\n\n              case 5:\n                token = _context8.sent;\n\n                if (!token) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                _context8.next = 9;\n                return service.fetchMe();\n\n              case 9:\n                currentUser = _context8.sent;\n\n              case 10:\n                commit('CURRENT_USER_REFRESH_SUCCESS', {\n                  currentUser: currentUser\n                });\n                _context8.next = 18;\n                break;\n\n              case 13:\n                _context8.prev = 13;\n                _context8.t0 = _context8[\"catch\"](1);\n                service.signout();\n                Errors.handle(_context8.t0);\n                commit('CURRENT_USER_REFRESH_ERROR', _context8.t0);\n\n              case 18:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[1, 13]]);\n      }));\n\n      function doRefreshCurrentUser(_x11) {\n        return _doRefreshCurrentUser.apply(this, arguments);\n      }\n\n      return doRefreshCurrentUser;\n    }(),\n    doUpdateProfile: function () {\n      var _doUpdateProfile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(_ref11, _ref12) {\n        var commit, dispatch, firstName, lastName, phoneNumber, avatars;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                commit = _ref11.commit, dispatch = _ref11.dispatch;\n                firstName = _ref12.firstName, lastName = _ref12.lastName, phoneNumber = _ref12.phoneNumber, avatars = _ref12.avatars;\n                _context9.prev = 2;\n                commit('UPDATE_PROFILE_START');\n                _context9.next = 6;\n                return service.updateProfile(firstName, lastName, phoneNumber, avatars);\n\n              case 6:\n                commit('UPDATE_PROFILE_SUCCESS');\n                _context9.next = 9;\n                return dispatch('doRefreshCurrentUser');\n\n              case 9:\n                Message.success(i18n('auth.profile.success'));\n                routerAsync().push('/');\n                _context9.next = 17;\n                break;\n\n              case 13:\n                _context9.prev = 13;\n                _context9.t0 = _context9[\"catch\"](2);\n                Errors.handle(_context9.t0);\n                commit('UPDATE_PROFILE_ERROR');\n\n              case 17:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[2, 13]]);\n      }));\n\n      function doUpdateProfile(_x12, _x13) {\n        return _doUpdateProfile.apply(this, arguments);\n      }\n\n      return doUpdateProfile;\n    }(),\n    doVerifyEmail: function () {\n      var _doVerifyEmail = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(_ref13, token) {\n        var commit, dispatch;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                commit = _ref13.commit, dispatch = _ref13.dispatch;\n                _context10.prev = 1;\n                commit('EMAIL_VERIFY_START');\n                _context10.next = 5;\n                return service.verifyEmail(token);\n\n              case 5:\n                Message.success(i18n('auth.verifyEmail.success'));\n                _context10.next = 8;\n                return dispatch('doRefreshCurrentUser');\n\n              case 8:\n                commit('EMAIL_VERIFY_SUCCESS');\n                routerAsync().push('/');\n                _context10.next = 18;\n                break;\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](1);\n                Errors.handle(_context10.t0);\n                commit('EMAIL_VERIFY_ERROR');\n                _context10.next = 18;\n                return dispatch('doSignout');\n\n              case 18:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[1, 12]]);\n      }));\n\n      function doVerifyEmail(_x14, _x15) {\n        return _doVerifyEmail.apply(this, arguments);\n      }\n\n      return doVerifyEmail;\n    }(),\n    doResetPassword: function () {\n      var _doResetPassword = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(_ref14, _ref15) {\n        var commit, dispatch, token, password;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                commit = _ref14.commit, dispatch = _ref14.dispatch;\n                token = _ref15.token, password = _ref15.password;\n                _context11.prev = 2;\n                commit('PASSWORD_RESET_START');\n                _context11.next = 6;\n                return service.passwordReset(token, password);\n\n              case 6:\n                Message.success(i18n('auth.passwordResetSuccess'));\n                commit('PASSWORD_RESET_SUCCESS');\n                routerAsync().push('/');\n                _context11.next = 17;\n                break;\n\n              case 11:\n                _context11.prev = 11;\n                _context11.t0 = _context11[\"catch\"](2);\n                Errors.handle(_context11.t0);\n                commit('PASSWORD_RESET_ERROR');\n                _context11.next = 17;\n                return dispatch('doSignout');\n\n              case 17:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, null, [[2, 11]]);\n      }));\n\n      function doResetPassword(_x16, _x17) {\n        return _doResetPassword.apply(this, arguments);\n      }\n\n      return doResetPassword;\n    }()\n  }\n};",{"version":3,"sources":["E:/Projects/vue-library-master/1-Project/frontend/src/modules/auth/auth-store.js"],"names":["service","Message","i18n","Errors","routerAsync","ProgressBar","AuthToken","namespaced","state","currentUser","loadingInit","loadingEmailConfirmation","loadingPasswordResetEmail","loadingVerifyEmail","loadingPasswordReset","loadingUpdateProfile","loading","getters","currentUserEmail","email","currentUserFullName","fullName","signedIn","id","roles","emptyPermissions","length","currentUserNameOrEmailPrefix","firstName","split","currentUserAvatar","avatars","publicUrl","mutations","CURRENT_USER_REFRESH_SUCCESS","payload","AUTH_START","AUTH_SUCCESS","AUTH_ERROR","EMAIL_CONFIRMATION_START","EMAIL_CONFIRMATION_SUCCESS","EMAIL_CONFIRMATION_ERROR","EMAIL_VERIFY_START","EMAIL_VERIFY_SUCCESS","EMAIL_VERIFY_ERROR","PASSWORD_RESET_START","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_ERROR","PASSWORD_RESET_EMAIL_START","PASSWORD_RESET_EMAIL_SUCCESS","PASSWORD_RESET_EMAIL_ERROR","UPDATE_PROFILE_START","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_ERROR","AUTH_INIT_SUCCESS","AUTH_INIT_ERROR","actions","doInit","commit","dispatch","get","token","fetchMe","done","console","error","doWaitUntilInit","Promise","resolve","waitUntilInitInterval","setInterval","clearInterval","doSendEmailConfirmation","sendEmailVerification","success","handle","doSendPasswordResetEmail","sendPasswordResetEmail","doRegisterEmailAndPassword","password","registerWithEmailAndPassword","set","push","signout","doSigninWithEmailAndPassword","rememberMe","signinWithEmailAndPassword","doSignout","doRefreshCurrentUser","doUpdateProfile","lastName","phoneNumber","updateProfile","doVerifyEmail","verifyEmail","doResetPassword","passwordReset"],"mappings":"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","sourcesContent":["import service from '@/modules/auth/auth-service';\nimport Message from '@/shared/message/message';\nimport { i18n } from '@/i18n';\nimport Errors from '@/shared/error/errors';\nimport { routerAsync } from '@/app-module';\nimport ProgressBar from '@/shared/progress-bar/progress-bar';\nimport { AuthToken } from '@/modules/auth/auth-token';\n\nexport default {\n  namespaced: true,\n\n  state: {\n    currentUser: null,\n    loadingInit: true,\n    loadingEmailConfirmation: false,\n    loadingPasswordResetEmail: false,\n    loadingVerifyEmail: false,\n    loadingPasswordReset: false,\n    loadingUpdateProfile: false,\n    loading: false,\n  },\n\n  getters: {\n    currentUser: (state) => state.currentUser,\n    currentUserEmail: (state, getters) =>\n      getters.currentUser\n        ? getters.currentUser.email\n        : null,\n    currentUserFullName: (state, getters) =>\n      getters.currentUser\n        ? getters.currentUser.fullName\n        : '',\n\n    signedIn: (state, getters) =>\n      !!getters.currentUser && !!getters.currentUser.id,\n\n    roles: (state, getters) =>\n      getters.currentUser\n        ? getters.currentUser.roles || []\n        : [],\n\n    emptyPermissions: (state, getters) =>\n      !getters.roles || !getters.roles.length,\n\n    loading: (state) => !!state.loading,\n\n    loadingInit: (state) => !!state.loadingInit,\n\n    loadingEmailConfirmation: (state) =>\n      !!state.loadingEmailConfirmation,\n\n    loadingPasswordResetEmail: (state) =>\n      !!state.loadingPasswordResetEmail,\n\n    loadingPasswordReset: (state) =>\n      !!state.loadingPasswordReset,\n\n    loadingVerifyEmail: (state) =>\n      !!state.loadingVerifyEmail,\n\n    loadingUpdateProfile: (state) =>\n      !!state.loadingUpdateProfile,\n\n    currentUserNameOrEmailPrefix: (state, getters) => {\n      if (!getters.currentUser) {\n        return null;\n      }\n\n      if (\n        getters.currentUserFullName &&\n        getters.currentUserFullName.length < 25\n      ) {\n        return getters.currentUserFullName;\n      }\n\n      if (getters.currentUser.firstName) {\n        return getters.currentUser.firstName;\n      }\n\n      return getters.currentUser.email.split('@')[0];\n    },\n\n    currentUserAvatar: (state, getters) => {\n      if (\n        !getters.currentUser ||\n        !getters.currentUser.avatars ||\n        !getters.currentUser.avatars.length ||\n        !getters.currentUser.avatars[0].publicUrl\n      ) {\n        return null;\n      }\n\n      return getters.currentUser.avatars[0].publicUrl;\n    },\n  },\n\n  mutations: {\n    CURRENT_USER_REFRESH_SUCCESS(state, payload) {\n      state.currentUser = payload.currentUser || null;\n    },\n\n    AUTH_START(state) {\n      state.loading = true;\n    },\n\n    AUTH_SUCCESS(state, payload) {\n      state.currentUser = payload.currentUser || null;\n      state.loading = false;\n    },\n\n    AUTH_ERROR(state) {\n      state.currentUser = null;\n      state.loading = false;\n    },\n\n    EMAIL_CONFIRMATION_START(state) {\n      state.loadingEmailConfirmation = true;\n    },\n\n    EMAIL_CONFIRMATION_SUCCESS(state) {\n      state.loadingEmailConfirmation = false;\n    },\n\n    EMAIL_CONFIRMATION_ERROR(state) {\n      state.loadingEmailConfirmation = false;\n    },\n\n    EMAIL_VERIFY_START(state) {\n      state.loadingVerifyEmail = true;\n    },\n\n    EMAIL_VERIFY_SUCCESS(state) {\n      state.loadingVerifyEmail = false;\n    },\n\n    EMAIL_VERIFY_ERROR(state) {\n      state.loadingVerifyEmail = false;\n    },\n\n    PASSWORD_RESET_START(state) {\n      state.loadingPasswordReset = true;\n    },\n\n    PASSWORD_RESET_SUCCESS(state) {\n      state.loadingPasswordReset = false;\n    },\n\n    PASSWORD_RESET_ERROR(state) {\n      state.loadingPasswordReset = false;\n    },\n\n    PASSWORD_RESET_EMAIL_START(state) {\n      state.loadingPasswordResetEmail = true;\n    },\n\n    PASSWORD_RESET_EMAIL_SUCCESS(state) {\n      state.loadingPasswordResetEmail = false;\n    },\n\n    PASSWORD_RESET_EMAIL_ERROR(state) {\n      state.loadingPasswordResetEmail = false;\n    },\n\n    UPDATE_PROFILE_START(state) {\n      state.loadingUpdateProfile = true;\n    },\n\n    UPDATE_PROFILE_SUCCESS(state) {\n      state.loadingUpdateProfile = false;\n    },\n\n    UPDATE_PROFILE_ERROR(state) {\n      state.loadingUpdateProfile = false;\n    },\n\n    AUTH_INIT_SUCCESS(state, payload) {\n      state.currentUser = payload.currentUser || null;\n      state.loadingInit = false;\n    },\n\n    AUTH_INIT_ERROR(state) {\n      state.currentUser = null;\n      state.loadingInit = false;\n    },\n  },\n\n  actions: {\n    async doInit({ commit, dispatch }) {\n      try {\n        const token = await AuthToken.get();\n        let currentUser = null;\n\n        if (token) {\n          currentUser = await service.fetchMe();\n        }\n\n        commit('AUTH_INIT_SUCCESS', { currentUser });\n        ProgressBar.done();\n      } catch (error) {\n        console.error(error);\n        commit('AUTH_INIT_ERROR');\n        await dispatch('doSignout');\n        ProgressBar.done();\n      }\n    },\n\n    async doWaitUntilInit({ getters }) {\n      if (!getters.loadingInit) {\n        return Promise.resolve();\n      }\n\n      return new Promise((resolve) => {\n        const waitUntilInitInterval = setInterval(() => {\n          if (!getters.loadingInit) {\n            clearInterval(waitUntilInitInterval);\n            resolve();\n          }\n        }, 500);\n      });\n    },\n\n    async doSendEmailConfirmation({ commit }) {\n      try {\n        commit('EMAIL_CONFIRMATION_START');\n\n        await service.sendEmailVerification();\n\n        Message.success(\n          i18n('auth.verificationEmailSuccess'),\n        );\n\n        commit('EMAIL_CONFIRMATION_SUCCESS');\n      } catch (error) {\n        Errors.handle(error);\n        commit('EMAIL_CONFIRMATION_ERROR');\n      }\n    },\n\n    async doSendPasswordResetEmail({ commit }, email) {\n      try {\n        commit('PASSWORD_RESET_EMAIL_START');\n        await service.sendPasswordResetEmail(email);\n        Message.success(\n          i18n('auth.passwordResetEmailSuccess'),\n        );\n        commit('PASSWORD_RESET_EMAIL_SUCCESS');\n      } catch (error) {\n        Errors.handle(error);\n        commit('PASSWORD_RESET_EMAIL_ERROR');\n      }\n    },\n\n    async doRegisterEmailAndPassword(\n      { commit },\n      { email, password },\n    ) {\n      try {\n        commit('AUTH_START');\n\n        const token = await service.registerWithEmailAndPassword(\n          email,\n          password,\n        );\n\n        AuthToken.set(token, true);\n\n        const currentUser = await service.fetchMe();\n\n        commit('AUTH_SUCCESS', {\n          currentUser,\n        });\n\n        routerAsync().push('/');\n      } catch (error) {\n        await service.signout();\n        Errors.handle(error);\n        commit('AUTH_ERROR');\n      }\n    },\n\n    async doSigninWithEmailAndPassword(\n      { commit },\n      { email, password, rememberMe },\n    ) {\n      try {\n        commit('AUTH_START');\n\n        let currentUser = null;\n\n        const token = await service.signinWithEmailAndPassword(\n          email,\n          password,\n          rememberMe,\n        );\n\n        AuthToken.set(token, rememberMe);\n        currentUser = await service.fetchMe();\n\n        commit('AUTH_SUCCESS', {\n          currentUser,\n        });\n\n        routerAsync().push('/');\n      } catch (error) {\n        await service.signout();\n        Errors.handle(error);\n        commit('AUTH_ERROR');\n      }\n    },\n\n    async doSignout({ commit }) {\n      try {\n        commit('AUTH_START');\n        await service.signout();\n\n        commit('AUTH_SUCCESS', {\n          currentUser: null,\n        });\n\n        routerAsync().push('/auth/signin');\n      } catch (error) {\n        Errors.handle(error);\n        commit('AUTH_ERROR');\n      }\n    },\n\n    async doRefreshCurrentUser({ commit }) {\n      try {\n        let currentUser = null;\n        const token = await AuthToken.get();\n\n        if (token) {\n          currentUser = await service.fetchMe();\n        }\n\n        commit('CURRENT_USER_REFRESH_SUCCESS', {\n          currentUser,\n        });\n      } catch (error) {\n        service.signout();\n        Errors.handle(error);\n\n        commit('CURRENT_USER_REFRESH_ERROR', error);\n      }\n    },\n\n    async doUpdateProfile(\n      { commit, dispatch },\n      { firstName, lastName, phoneNumber, avatars },\n    ) {\n      try {\n        commit('UPDATE_PROFILE_START');\n\n        await service.updateProfile(\n          firstName,\n          lastName,\n          phoneNumber,\n          avatars,\n        );\n\n        commit('UPDATE_PROFILE_SUCCESS');\n        await dispatch('doRefreshCurrentUser');\n        Message.success(i18n('auth.profile.success'));\n        routerAsync().push('/');\n      } catch (error) {\n        Errors.handle(error);\n        commit('UPDATE_PROFILE_ERROR');\n      }\n    },\n\n    async doVerifyEmail({ commit, dispatch }, token) {\n      try {\n        commit('EMAIL_VERIFY_START');\n        await service.verifyEmail(token);\n        Message.success(i18n('auth.verifyEmail.success'));\n        await dispatch('doRefreshCurrentUser');\n        commit('EMAIL_VERIFY_SUCCESS');\n        routerAsync().push('/');\n      } catch (error) {\n        Errors.handle(error);\n        commit('EMAIL_VERIFY_ERROR');\n        await dispatch('doSignout');\n      }\n    },\n\n    async doResetPassword(\n      { commit, dispatch },\n      { token, password },\n    ) {\n      try {\n        commit('PASSWORD_RESET_START');\n        await service.passwordReset(token, password);\n        Message.success(i18n('auth.passwordResetSuccess'));\n        commit('PASSWORD_RESET_SUCCESS');\n        routerAsync().push('/');\n      } catch (error) {\n        Errors.handle(error);\n        commit('PASSWORD_RESET_ERROR');\n        await dispatch('doSignout');\n      }\n    },\n  },\n};\n"]}]}