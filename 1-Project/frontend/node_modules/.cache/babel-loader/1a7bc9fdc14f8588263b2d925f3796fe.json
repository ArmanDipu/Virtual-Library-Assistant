{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\modules\\iam\\iam-list-store.js","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\modules\\iam\\iam-list-store.js","mtime":1641838497440},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\babel.config.js","mtime":1641838494433},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1641838766164}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _defineProperty from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { IamService } from '@/modules/iam/iam-service';\nimport iamListExporterFields from '@/modules/iam/iam-list-exporter-fields';\nimport Message from '@/shared/message/message';\nimport { i18n } from '@/i18n';\nimport Errors from '@/shared/error/errors';\nimport Exporter from '@/shared/exporter/exporter';\nvar INITIAL_PAGE_SIZE = 10;\nexport default {\n  namespaced: true,\n  state: {\n    rows: [],\n    count: 0,\n    loading: false,\n    filter: {},\n    pagination: {},\n    sorter: {},\n    table: null\n  },\n  getters: {\n    loading: function loading(state) {\n      return state.loading;\n    },\n    exportLoading: function exportLoading(state) {\n      return state.exportLoading;\n    },\n    rows: function rows(state) {\n      return state.rows || [];\n    },\n    count: function count(state) {\n      return state.count;\n    },\n    hasRows: function hasRows(state, getters) {\n      return getters.count > 0;\n    },\n    orderBy: function orderBy(state) {\n      var sorter = state.sorter;\n\n      if (!sorter) {\n        return null;\n      }\n\n      if (!sorter.prop) {\n        return null;\n      }\n\n      var direction = sorter.order === 'descending' ? 'DESC' : 'ASC';\n      return \"\".concat(sorter.prop, \"_\").concat(direction);\n    },\n    filter: function filter(state) {\n      return state.filter;\n    },\n    limit: function limit(state) {\n      var pagination = state.pagination;\n\n      if (!pagination || !pagination.pageSize) {\n        return INITIAL_PAGE_SIZE;\n      }\n\n      return pagination.pageSize;\n    },\n    offset: function offset(state) {\n      var pagination = state.pagination;\n\n      if (!pagination || !pagination.pageSize) {\n        return 0;\n      }\n\n      var currentPage = pagination.currentPage || 1;\n      return (currentPage - 1) * pagination.pageSize;\n    },\n    pagination: function pagination(state, getters) {\n      return _objectSpread(_objectSpread({}, state.pagination), {}, {\n        total: getters.count,\n        showSizeChanger: true\n      });\n    },\n    selectedRows: function selectedRows(state) {\n      return state.table ? state.table.selection : [];\n    }\n  },\n  mutations: {\n    RESETED: function RESETED(state) {\n      state.rows = [];\n      state.count = 0;\n      state.loading = false;\n      state.filter = {};\n      state.pagination = {};\n      state.sorter = {};\n\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    },\n    UNSELECT_ALL: function UNSELECT_ALL(state) {\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    },\n    TABLE_MOUNTED: function TABLE_MOUNTED(state, payload) {\n      state.table = payload;\n    },\n    PAGINATION_CHANGED: function PAGINATION_CHANGED(state, payload) {\n      state.pagination = payload || {};\n    },\n    PAGINATION_CURRENT_PAGE_CHANGED: function PAGINATION_CURRENT_PAGE_CHANGED(state, payload) {\n      var previousPagination = state.pagination || {};\n      state.pagination = {\n        currentPage: payload || 1,\n        pageSize: previousPagination.pageSize || INITIAL_PAGE_SIZE\n      };\n    },\n    PAGINATION_PAGE_SIZE_CHANGED: function PAGINATION_PAGE_SIZE_CHANGED(state, payload) {\n      var previousPagination = state.pagination || {};\n      state.pagination = {\n        currentPage: previousPagination.currentPage || 1,\n        pageSize: payload || INITIAL_PAGE_SIZE\n      };\n    },\n    SORTER_CHANGED: function SORTER_CHANGED(state, payload) {\n      state.sorter = payload || {};\n    },\n    FETCH_STARTED: function FETCH_STARTED(state, payload) {\n      state.loading = true;\n\n      if (state.table) {\n        state.table.clearSelection();\n      }\n\n      state.filter = payload && payload.filter ? payload.filter : {};\n      state.pagination = payload && payload.keepPagination ? state.pagination : {};\n    },\n    FETCH_SUCCESS: function FETCH_SUCCESS(state, payload) {\n      state.loading = false;\n      state.rows = payload.rows;\n      state.count = payload.count;\n    },\n    FETCH_ERROR: function FETCH_ERROR(state) {\n      state.loading = false;\n      state.rows = [];\n      state.count = 0;\n    },\n    EXPORT_STARTED: function EXPORT_STARTED(state) {\n      state.exportLoading = true;\n    },\n    EXPORT_SUCCESS: function EXPORT_SUCCESS(state) {\n      state.exportLoading = false;\n    },\n    EXPORT_ERROR: function EXPORT_ERROR(state) {\n      state.exportLoading = false;\n    },\n    REMOVE_ALL_SELECTED_STARTED: function REMOVE_ALL_SELECTED_STARTED(state) {\n      state.loading = true;\n    },\n    REMOVE_ALL_SELECTED_ERROR: function REMOVE_ALL_SELECTED_ERROR(state) {\n      state.loading = false;\n    },\n    REMOVE_ALL_SELECTED_SUCCESS: function REMOVE_ALL_SELECTED_SUCCESS(state) {\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    },\n    CHANGE_STATUS_SELECTED_STARTED: function CHANGE_STATUS_SELECTED_STARTED(state) {\n      state.loading = true;\n    },\n    CHANGE_STATUS_SELECTED_ERROR: function CHANGE_STATUS_SELECTED_ERROR(state) {\n      state.loading = false;\n    },\n    CHANGE_STATUS_SELECTED_SUCCESS: function CHANGE_STATUS_SELECTED_SUCCESS(state) {\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    }\n  },\n  actions: {\n    doUnselectAll: function doUnselectAll(_ref) {\n      var commit = _ref.commit;\n      commit('UNSELECT_ALL');\n    },\n    doMountTable: function doMountTable(_ref2, table) {\n      var commit = _ref2.commit;\n      commit('TABLE_MOUNTED', table);\n    },\n    doReset: function () {\n      var _doReset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref3) {\n        var commit, dispatch;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref3.commit, dispatch = _ref3.dispatch;\n                commit('RESETED');\n                return _context.abrupt(\"return\", dispatch('doFetch'));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function doReset(_x) {\n        return _doReset.apply(this, arguments);\n      }\n\n      return doReset;\n    }(),\n    doExport: function () {\n      var _doExport = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref4) {\n        var commit, getters, filter, response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref4.commit, getters = _ref4.getters;\n                _context2.prev = 1;\n\n                if (!(!iamListExporterFields || !iamListExporterFields.length)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('iamListExporterFields is required');\n\n              case 4:\n                commit('EXPORT_STARTED');\n                filter = getters.filter;\n                _context2.next = 8;\n                return IamService.fetchUsers(filter, getters.orderBy, null, null);\n\n              case 8:\n                response = _context2.sent;\n                new Exporter(iamListExporterFields, i18n('iam.users.exporterFileName')).transformAndExportAsExcelFile(response.rows);\n                commit('EXPORT_SUCCESS');\n                _context2.next = 17;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](1);\n                Errors.handle(_context2.t0);\n                commit('EXPORT_ERROR');\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 13]]);\n      }));\n\n      function doExport(_x2) {\n        return _doExport.apply(this, arguments);\n      }\n\n      return doExport;\n    }(),\n    doChangePagination: function doChangePagination(_ref5, pagination) {\n      var commit = _ref5.commit,\n          getters = _ref5.getters,\n          dispatch = _ref5.dispatch;\n      commit('PAGINATION_CHANGED', pagination);\n      var filter = getters.filter;\n      dispatch('doFetch', {\n        filter: filter,\n        keepPagination: true\n      });\n    },\n    doChangePaginationPageSize: function doChangePaginationPageSize(_ref6, pageSize) {\n      var commit = _ref6.commit,\n          getters = _ref6.getters,\n          dispatch = _ref6.dispatch;\n      commit('PAGINATION_PAGE_SIZE_CHANGED', pageSize);\n      var filter = getters.filter;\n      dispatch('doFetch', {\n        filter: filter,\n        keepPagination: true\n      });\n    },\n    doChangePaginationCurrentPage: function doChangePaginationCurrentPage(_ref7, currentPage) {\n      var commit = _ref7.commit,\n          getters = _ref7.getters,\n          dispatch = _ref7.dispatch;\n      commit('PAGINATION_CURRENT_PAGE_CHANGED', currentPage);\n      var filter = getters.filter;\n      dispatch('doFetch', {\n        filter: filter,\n        keepPagination: true\n      });\n    },\n    doChangeSort: function doChangeSort(_ref8, sorter) {\n      var commit = _ref8.commit,\n          getters = _ref8.getters,\n          dispatch = _ref8.dispatch;\n      commit('SORTER_CHANGED', sorter);\n      var filter = getters.filter;\n      dispatch('doFetch', {\n        filter: filter,\n        keepPagination: true\n      });\n    },\n    doFetch: function () {\n      var _doFetch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref9) {\n        var commit,\n            getters,\n            _ref10,\n            filter,\n            keepPagination,\n            response,\n            _args3 = arguments;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref9.commit, getters = _ref9.getters;\n                _ref10 = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, filter = _ref10.filter, keepPagination = _ref10.keepPagination;\n                _context3.prev = 2;\n                commit('FETCH_STARTED', {\n                  filter: filter,\n                  keepPagination: keepPagination\n                });\n                _context3.next = 6;\n                return IamService.fetchUsers(filter, getters.orderBy, getters.limit, getters.offset);\n\n              case 6:\n                response = _context3.sent;\n                commit('FETCH_SUCCESS', {\n                  rows: response.rows,\n                  count: response.count\n                });\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](2);\n                Errors.handle(_context3.t0);\n                commit('FETCH_ERROR');\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[2, 10]]);\n      }));\n\n      function doFetch(_x3) {\n        return _doFetch.apply(this, arguments);\n      }\n\n      return doFetch;\n    }(),\n    doDisableAllSelected: function () {\n      var _doDisableAllSelected = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref11) {\n        var getters, commit, dispatch, selectedRows, filter, _filter;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                getters = _ref11.getters, commit = _ref11.commit, dispatch = _ref11.dispatch;\n                _context4.prev = 1;\n                selectedRows = getters.selectedRows;\n                commit('CHANGE_STATUS_SELECTED_STARTED');\n                _context4.next = 6;\n                return IamService.disable(selectedRows.map(function (user) {\n                  return user.id;\n                }));\n\n              case 6:\n                commit('CHANGE_STATUS_SELECTED_SUCCESS');\n                Message.success(i18n('iam.doDisableAllSuccess'));\n                filter = getters.filter;\n                dispatch('doFetch', {\n                  filter: filter\n                });\n                _context4.next = 18;\n                break;\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](1);\n                Errors.handle(_context4.t0);\n                commit('CHANGE_STATUS_SELECTED_ERROR');\n                _filter = getters.filter;\n                dispatch('doFetch', {\n                  filter: _filter\n                });\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 12]]);\n      }));\n\n      function doDisableAllSelected(_x4) {\n        return _doDisableAllSelected.apply(this, arguments);\n      }\n\n      return doDisableAllSelected;\n    }(),\n    doEnableAllSelected: function () {\n      var _doEnableAllSelected = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref12) {\n        var commit, getters, dispatch, selectedRows, filter, _filter2;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                commit = _ref12.commit, getters = _ref12.getters, dispatch = _ref12.dispatch;\n                _context5.prev = 1;\n                selectedRows = getters.selectedRows;\n                commit('CHANGE_STATUS_SELECTED_STARTED');\n                _context5.next = 6;\n                return IamService.enable(selectedRows.map(function (user) {\n                  return user.id;\n                }));\n\n              case 6:\n                commit('CHANGE_STATUS_SELECTED_SUCCESS');\n                Message.success(i18n('iam.doEnableAllSuccess'));\n                filter = getters.filter;\n                dispatch('doFetch', {\n                  filter: filter\n                });\n                _context5.next = 18;\n                break;\n\n              case 12:\n                _context5.prev = 12;\n                _context5.t0 = _context5[\"catch\"](1);\n                Errors.handle(_context5.t0);\n                commit('CHANGE_STATUS_SELECTED_ERROR');\n                _filter2 = getters.filter;\n                dispatch('doFetch', {\n                  filter: _filter2\n                });\n\n              case 18:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 12]]);\n      }));\n\n      function doEnableAllSelected(_x5) {\n        return _doEnableAllSelected.apply(this, arguments);\n      }\n\n      return doEnableAllSelected;\n    }(),\n    doRemoveAllSelected: function () {\n      var _doRemoveAllSelected = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref13) {\n        var commit, getters, dispatch, selectedRows, filter, _filter3;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                commit = _ref13.commit, getters = _ref13.getters, dispatch = _ref13.dispatch;\n                _context6.prev = 1;\n                selectedRows = getters.selectedRows;\n                commit('REMOVE_ALL_SELECTED_STARTED');\n                _context6.next = 6;\n                return IamService.remove(selectedRows.map(function (row) {\n                  return row.email;\n                }), [], true);\n\n              case 6:\n                dispatch('REMOVE_ALL_SELECTED_SUCCESS');\n                Message.success(i18n('iam.users.doRemoveAllSelectedSuccess'));\n                filter = getters.filter;\n                dispatch('doFetch', {\n                  filter: filter\n                });\n                _context6.next = 18;\n                break;\n\n              case 12:\n                _context6.prev = 12;\n                _context6.t0 = _context6[\"catch\"](1);\n                Errors.handle(_context6.t0);\n                commit('REMOVE_ALL_SELECTED_ERROR');\n                _filter3 = getters.filter;\n                dispatch('doFetch', {\n                  filter: _filter3\n                });\n\n              case 18:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[1, 12]]);\n      }));\n\n      function doRemoveAllSelected(_x6) {\n        return _doRemoveAllSelected.apply(this, arguments);\n      }\n\n      return doRemoveAllSelected;\n    }()\n  }\n};",{"version":3,"sources":["E:/Projects/vue-library-master/1-Project/frontend/src/modules/iam/iam-list-store.js"],"names":["IamService","iamListExporterFields","Message","i18n","Errors","Exporter","INITIAL_PAGE_SIZE","namespaced","state","rows","count","loading","filter","pagination","sorter","table","getters","exportLoading","hasRows","orderBy","prop","direction","order","limit","pageSize","offset","currentPage","total","showSizeChanger","selectedRows","selection","mutations","RESETED","clearSelection","UNSELECT_ALL","TABLE_MOUNTED","payload","PAGINATION_CHANGED","PAGINATION_CURRENT_PAGE_CHANGED","previousPagination","PAGINATION_PAGE_SIZE_CHANGED","SORTER_CHANGED","FETCH_STARTED","keepPagination","FETCH_SUCCESS","FETCH_ERROR","EXPORT_STARTED","EXPORT_SUCCESS","EXPORT_ERROR","REMOVE_ALL_SELECTED_STARTED","REMOVE_ALL_SELECTED_ERROR","REMOVE_ALL_SELECTED_SUCCESS","CHANGE_STATUS_SELECTED_STARTED","CHANGE_STATUS_SELECTED_ERROR","CHANGE_STATUS_SELECTED_SUCCESS","actions","doUnselectAll","commit","doMountTable","doReset","dispatch","doExport","length","Error","fetchUsers","response","transformAndExportAsExcelFile","handle","doChangePagination","doChangePaginationPageSize","doChangePaginationCurrentPage","doChangeSort","doFetch","doDisableAllSelected","disable","map","user","id","success","doEnableAllSelected","enable","doRemoveAllSelected","remove","row","email"],"mappings":"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","sourcesContent":["import { IamService } from '@/modules/iam/iam-service';\nimport iamListExporterFields from '@/modules/iam/iam-list-exporter-fields';\nimport Message from '@/shared/message/message';\nimport { i18n } from '@/i18n';\nimport Errors from '@/shared/error/errors';\nimport Exporter from '@/shared/exporter/exporter';\n\nconst INITIAL_PAGE_SIZE = 10;\n\nexport default {\n  namespaced: true,\n\n  state: {\n    rows: [],\n    count: 0,\n    loading: false,\n    filter: {},\n    pagination: {},\n    sorter: {},\n\n    table: null,\n  },\n\n  getters: {\n    loading: (state) => state.loading,\n\n    exportLoading: (state) => state.exportLoading,\n\n    rows: (state) => state.rows || [],\n\n    count: (state) => state.count,\n\n    hasRows: (state, getters) => getters.count > 0,\n\n    orderBy: (state) => {\n      const sorter = state.sorter;\n\n      if (!sorter) {\n        return null;\n      }\n\n      if (!sorter.prop) {\n        return null;\n      }\n\n      let direction =\n        sorter.order === 'descending' ? 'DESC' : 'ASC';\n\n      return `${sorter.prop}_${direction}`;\n    },\n\n    filter: (state) => state.filter,\n\n    limit: (state) => {\n      const pagination = state.pagination;\n\n      if (!pagination || !pagination.pageSize) {\n        return INITIAL_PAGE_SIZE;\n      }\n\n      return pagination.pageSize;\n    },\n\n    offset: (state) => {\n      const pagination = state.pagination;\n\n      if (!pagination || !pagination.pageSize) {\n        return 0;\n      }\n\n      const currentPage = pagination.currentPage || 1;\n\n      return (currentPage - 1) * pagination.pageSize;\n    },\n\n    pagination: (state, getters) => {\n      return {\n        ...state.pagination,\n        total: getters.count,\n        showSizeChanger: true,\n      };\n    },\n\n    selectedRows: (state) => {\n      return state.table ? state.table.selection : [];\n    },\n  },\n\n  mutations: {\n    RESETED(state) {\n      state.rows = [];\n      state.count = 0;\n      state.loading = false;\n      state.filter = {};\n      state.pagination = {};\n      state.sorter = {};\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    },\n\n    UNSELECT_ALL(state) {\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    },\n\n    TABLE_MOUNTED(state, payload) {\n      state.table = payload;\n    },\n\n    PAGINATION_CHANGED(state, payload) {\n      state.pagination = payload || {};\n    },\n\n    PAGINATION_CURRENT_PAGE_CHANGED(state, payload) {\n      const previousPagination = state.pagination || {};\n\n      state.pagination = {\n        currentPage: payload || 1,\n        pageSize:\n          previousPagination.pageSize || INITIAL_PAGE_SIZE,\n      };\n    },\n\n    PAGINATION_PAGE_SIZE_CHANGED(state, payload) {\n      const previousPagination = state.pagination || {};\n\n      state.pagination = {\n        currentPage: previousPagination.currentPage || 1,\n        pageSize: payload || INITIAL_PAGE_SIZE,\n      };\n    },\n\n    SORTER_CHANGED(state, payload) {\n      state.sorter = payload || {};\n    },\n\n    FETCH_STARTED(state, payload) {\n      state.loading = true;\n\n      if (state.table) {\n        state.table.clearSelection();\n      }\n\n      state.filter =\n        payload && payload.filter ? payload.filter : {};\n      state.pagination =\n        payload && payload.keepPagination\n          ? state.pagination\n          : {};\n    },\n\n    FETCH_SUCCESS(state, payload) {\n      state.loading = false;\n      state.rows = payload.rows;\n      state.count = payload.count;\n    },\n\n    FETCH_ERROR(state) {\n      state.loading = false;\n      state.rows = [];\n      state.count = 0;\n    },\n\n    EXPORT_STARTED(state) {\n      state.exportLoading = true;\n    },\n\n    EXPORT_SUCCESS(state) {\n      state.exportLoading = false;\n    },\n\n    EXPORT_ERROR(state) {\n      state.exportLoading = false;\n    },\n\n    REMOVE_ALL_SELECTED_STARTED(state) {\n      state.loading = true;\n    },\n\n    REMOVE_ALL_SELECTED_ERROR(state) {\n      state.loading = false;\n    },\n\n    REMOVE_ALL_SELECTED_SUCCESS(state) {\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    },\n\n    CHANGE_STATUS_SELECTED_STARTED(state) {\n      state.loading = true;\n    },\n\n    CHANGE_STATUS_SELECTED_ERROR(state) {\n      state.loading = false;\n    },\n\n    CHANGE_STATUS_SELECTED_SUCCESS(state) {\n      if (state.table) {\n        state.table.clearSelection();\n      }\n    },\n  },\n\n  actions: {\n    doUnselectAll({ commit }) {\n      commit('UNSELECT_ALL');\n    },\n\n    doMountTable({ commit }, table) {\n      commit('TABLE_MOUNTED', table);\n    },\n\n    async doReset({ commit, dispatch }) {\n      commit('RESETED');\n      return dispatch('doFetch');\n    },\n\n    async doExport({ commit, getters }) {\n      try {\n        if (!iamListExporterFields || !iamListExporterFields.length) {\n          throw new Error('iamListExporterFields is required');\n        }\n\n        commit('EXPORT_STARTED');\n\n        const filter = getters.filter;\n\n        const response = await IamService.fetchUsers(\n          filter,\n          getters.orderBy,\n          null,\n          null,\n        );\n\n        new Exporter(\n          iamListExporterFields,\n          i18n('iam.users.exporterFileName'),\n        ).transformAndExportAsExcelFile(response.rows);\n\n        commit('EXPORT_SUCCESS');\n      } catch (error) {\n        Errors.handle(error);\n\n        commit('EXPORT_ERROR');\n      }\n    },\n\n    doChangePagination(\n      { commit, getters, dispatch },\n      pagination,\n    ) {\n      commit('PAGINATION_CHANGED', pagination);\n      const filter = getters.filter;\n      dispatch('doFetch', { filter, keepPagination: true });\n    },\n\n    doChangePaginationPageSize(\n      { commit, getters, dispatch },\n      pageSize,\n    ) {\n      commit('PAGINATION_PAGE_SIZE_CHANGED', pageSize);\n      const filter = getters.filter;\n      dispatch('doFetch', { filter, keepPagination: true });\n    },\n\n    doChangePaginationCurrentPage(\n      { commit, getters, dispatch },\n      currentPage,\n    ) {\n      commit(\n        'PAGINATION_CURRENT_PAGE_CHANGED',\n        currentPage,\n      );\n      const filter = getters.filter;\n      dispatch('doFetch', { filter, keepPagination: true });\n    },\n\n    doChangeSort({ commit, getters, dispatch }, sorter) {\n      commit('SORTER_CHANGED', sorter);\n      const filter = getters.filter;\n      dispatch('doFetch', { filter, keepPagination: true });\n    },\n\n    async doFetch(\n      { commit, getters },\n      { filter, keepPagination } = {},\n    ) {\n      try {\n        commit('FETCH_STARTED', { filter, keepPagination });\n\n        const response = await IamService.fetchUsers(\n          filter,\n          getters.orderBy,\n          getters.limit,\n          getters.offset,\n        );\n\n        commit('FETCH_SUCCESS', {\n          rows: response.rows,\n          count: response.count,\n        });\n      } catch (error) {\n        Errors.handle(error);\n        commit('FETCH_ERROR');\n      }\n    },\n\n    async doDisableAllSelected({\n      getters,\n      commit,\n      dispatch,\n    }) {\n      try {\n        const selectedRows = getters.selectedRows;\n\n        commit('CHANGE_STATUS_SELECTED_STARTED');\n\n        await IamService.disable(\n          selectedRows.map((user) => user.id),\n        );\n\n        commit('CHANGE_STATUS_SELECTED_SUCCESS');\n\n        Message.success(i18n('iam.doDisableAllSuccess'));\n\n        const filter = getters.filter;\n        dispatch('doFetch', { filter });\n      } catch (error) {\n        Errors.handle(error);\n\n        commit('CHANGE_STATUS_SELECTED_ERROR');\n\n        const filter = getters.filter;\n        dispatch('doFetch', { filter });\n      }\n    },\n\n    async doEnableAllSelected({\n      commit,\n      getters,\n      dispatch,\n    }) {\n      try {\n        const selectedRows = getters.selectedRows;\n\n        commit('CHANGE_STATUS_SELECTED_STARTED');\n\n        await IamService.enable(\n          selectedRows.map((user) => user.id),\n        );\n\n        commit('CHANGE_STATUS_SELECTED_SUCCESS');\n\n        Message.success(i18n('iam.doEnableAllSuccess'));\n\n        const filter = getters.filter;\n        dispatch('doFetch', { filter });\n      } catch (error) {\n        Errors.handle(error);\n\n        commit('CHANGE_STATUS_SELECTED_ERROR');\n\n        const filter = getters.filter;\n        dispatch('doFetch', { filter });\n      }\n    },\n\n    async doRemoveAllSelected({\n      commit,\n      getters,\n      dispatch,\n    }) {\n      try {\n        const selectedRows = getters.selectedRows;\n\n        commit('REMOVE_ALL_SELECTED_STARTED');\n\n        await IamService.remove(\n          selectedRows.map((row) => row.email),\n          [],\n          true,\n        );\n\n        dispatch('REMOVE_ALL_SELECTED_SUCCESS');\n\n        Message.success(\n          i18n('iam.users.doRemoveAllSelectedSuccess'),\n        );\n\n        const filter = getters.filter;\n        dispatch('doFetch', { filter });\n      } catch (error) {\n        Errors.handle(error);\n\n        commit('REMOVE_ALL_SELECTED_ERROR');\n\n        const filter = getters.filter;\n        dispatch('doFetch', { filter });\n      }\n    },\n  },\n};\n"]}]}