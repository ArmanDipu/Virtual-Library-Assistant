{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\importer\\importer-schema.js","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\importer\\importer-schema.js","mtime":1641838499793},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\babel.config.js","mtime":1641838494433},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1641838766164}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as yup from 'yup';\nimport importerStatuses from '@/shared/importer/importer-statuses';\nexport var ImporterSchema = /*#__PURE__*/function () {\n  function ImporterSchema(fields) {\n    _classCallCheck(this, ImporterSchema);\n\n    this.fields = fields;\n    this.yupSchema = this.buildSchema();\n  }\n\n  _createClass(ImporterSchema, [{\n    key: \"buildSchema\",\n    value: function buildSchema() {\n      var shape = {};\n      this.fields.forEach(function (field) {\n        shape[field.name] = field.forImport();\n      });\n      return yup.object().shape(shape).noUnknown(true);\n    }\n  }, {\n    key: \"castForDisplay\",\n    value: function () {\n      var _castForDisplay = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(row, index) {\n        var rowWithColumnNames, validatableRow;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                rowWithColumnNames = {};\n                rowWithColumnNames._status = importerStatuses.PENDING;\n                rowWithColumnNames._line = index + 2\n                /* 0 and header */\n                ;\n                this.fields.forEach(function (field, index) {\n                  rowWithColumnNames[field.name] = row[index];\n                });\n                _context.prev = 4;\n                _context.next = 7;\n                return this.castForValidation(rowWithColumnNames);\n\n              case 7:\n                validatableRow = _context.sent;\n                _context.next = 10;\n                return this.yupSchema.validate(validatableRow);\n\n              case 10:\n                _context.next = 16;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](4);\n                rowWithColumnNames._status = importerStatuses.ERROR;\n                rowWithColumnNames._errorMessage = _context.t0.message;\n\n              case 16:\n                return _context.abrupt(\"return\", rowWithColumnNames);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 12]]);\n      }));\n\n      function castForDisplay(_x, _x2) {\n        return _castForDisplay.apply(this, arguments);\n      }\n\n      return castForDisplay;\n    }()\n  }, {\n    key: \"castForImport\",\n    value: function () {\n      var _castForImport = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(row) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.yupSchema.cast(row));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function castForImport(_x3) {\n        return _castForImport.apply(this, arguments);\n      }\n\n      return castForImport;\n    }()\n  }, {\n    key: \"castForValidation\",\n    value: function () {\n      var _castForValidation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(row) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.yupSchema.cast(row));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function castForValidation(_x4) {\n        return _castForValidation.apply(this, arguments);\n      }\n\n      return castForValidation;\n    }()\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return this.fields.map(function (field) {\n        return field.label;\n      });\n    }\n  }]);\n\n  return ImporterSchema;\n}();",{"version":3,"sources":["E:/Projects/vue-library-master/1-Project/frontend/src/shared/importer/importer-schema.js"],"names":["yup","importerStatuses","ImporterSchema","fields","yupSchema","buildSchema","shape","forEach","field","name","forImport","object","noUnknown","row","index","rowWithColumnNames","_status","PENDING","_line","castForValidation","validatableRow","validate","ERROR","_errorMessage","message","cast","map","label"],"mappings":";;;;;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AAEA,WAAaC,cAAb;AACE,0BAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiB,KAAKC,WAAL,EAAjB;AACD;;AAJH;AAAA;AAAA,WAME,uBAAc;AACZ,UAAMC,KAAK,GAAG,EAAd;AAEA,WAAKH,MAAL,CAAYI,OAAZ,CAAoB,UAACC,KAAD,EAAW;AAC7BF,QAAAA,KAAK,CAACE,KAAK,CAACC,IAAP,CAAL,GAAoBD,KAAK,CAACE,SAAN,EAApB;AACD,OAFD;AAIA,aAAOV,GAAG,CACPW,MADI,GAEJL,KAFI,CAEEA,KAFF,EAGJM,SAHI,CAGM,IAHN,CAAP;AAID;AAjBH;AAAA;AAAA;AAAA,oFAmBE,iBAAqBC,GAArB,EAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,kBADR,GAC6B,EAD7B;AAGEA,gBAAAA,kBAAkB,CAACC,OAAnB,GAA6Bf,gBAAgB,CAACgB,OAA9C;AACAF,gBAAAA,kBAAkB,CAACG,KAAnB,GAA2BJ,KAAK,GAAG;AAAE;AAArC;AAEA,qBAAKX,MAAL,CAAYI,OAAZ,CAAoB,UAACC,KAAD,EAAQM,KAAR,EAAkB;AACpCC,kBAAAA,kBAAkB,CAACP,KAAK,CAACC,IAAP,CAAlB,GAAiCI,GAAG,CAACC,KAAD,CAApC;AACD,iBAFD;AANF;AAAA;AAAA,uBAWiC,KAAKK,iBAAL,CAC3BJ,kBAD2B,CAXjC;;AAAA;AAWUK,gBAAAA,cAXV;AAAA;AAAA,uBAcU,KAAKhB,SAAL,CAAeiB,QAAf,CAAwBD,cAAxB,CAdV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBIL,gBAAAA,kBAAkB,CAACC,OAAnB,GAA6Bf,gBAAgB,CAACqB,KAA9C;AACAP,gBAAAA,kBAAkB,CAACQ,aAAnB,GAAmC,YAAMC,OAAzC;;AAjBJ;AAAA,iDAoBST,kBApBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAnBF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFA0CE,kBAAoBF,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAKT,SAAL,CAAeqB,IAAf,CAAoBZ,GAApB,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1CF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFA8CE,kBAAwBA,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAKT,SAAL,CAAeqB,IAAf,CAAoBZ,GAApB,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA9CF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,SAkDE,eAAa;AACX,aAAO,KAAKV,MAAL,CAAYuB,GAAZ,CAAgB,UAAClB,KAAD;AAAA,eAAWA,KAAK,CAACmB,KAAjB;AAAA,OAAhB,CAAP;AACD;AApDH;;AAAA;AAAA","sourcesContent":["import * as yup from 'yup';\nimport importerStatuses from '@/shared/importer/importer-statuses';\n\nexport class ImporterSchema {\n  constructor(fields) {\n    this.fields = fields;\n    this.yupSchema = this.buildSchema();\n  }\n\n  buildSchema() {\n    const shape = {};\n\n    this.fields.forEach((field) => {\n      shape[field.name] = field.forImport();\n    });\n\n    return yup\n      .object()\n      .shape(shape)\n      .noUnknown(true);\n  }\n\n  async castForDisplay(row, index) {\n    const rowWithColumnNames = {};\n\n    rowWithColumnNames._status = importerStatuses.PENDING;\n    rowWithColumnNames._line = index + 2 /* 0 and header */;\n\n    this.fields.forEach((field, index) => {\n      rowWithColumnNames[field.name] = row[index];\n    });\n\n    try {\n      const validatableRow = await this.castForValidation(\n        rowWithColumnNames,\n      );\n      await this.yupSchema.validate(validatableRow);\n    } catch (error) {\n      rowWithColumnNames._status = importerStatuses.ERROR;\n      rowWithColumnNames._errorMessage = error.message;\n    }\n\n    return rowWithColumnNames;\n  }\n\n  async castForImport(row) {\n    return this.yupSchema.cast(row);\n  }\n\n  async castForValidation(row) {\n    return this.yupSchema.cast(row);\n  }\n\n  get labels() {\n    return this.fields.map((field) => field.label);\n  }\n}\n"]}]}