{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\file-upload\\file-uploader.js","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\file-upload\\file-uploader.js","mtime":1641838499430},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\babel.config.js","mtime":1641838494433},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1641838766164}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport _classCallCheck from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as uuid from 'uuid/v4';\nimport { i18n } from '@/i18n';\nimport filesize from 'filesize';\nimport { AuthToken } from '@/modules/auth/auth-token';\nimport Axios from 'axios';\nimport config from '@/config';\n\nfunction extractExtensionFrom(filename) {\n  if (!filename) {\n    return null;\n  }\n\n  var regex = /(?:\\.([^.]+))?$/;\n  return regex.exec(filename)[1];\n}\n\nexport var FileUploader = /*#__PURE__*/function () {\n  function FileUploader() {\n    _classCallCheck(this, FileUploader);\n  }\n\n  _createClass(FileUploader, null, [{\n    key: \"validate\",\n    value: function validate(file, schema) {\n      if (!schema) {\n        return;\n      }\n\n      if (schema.image) {\n        if (!file.type.startsWith('image')) {\n          throw new Error(i18n('fileUploader.image'));\n        }\n      }\n\n      if (schema.size && file.size > schema.size) {\n        throw new Error(i18n('fileUploader.size', filesize(schema.size)));\n      }\n\n      var extension = extractExtensionFrom(file.name);\n\n      if (schema.formats && !schema.formats.includes(extension)) {\n        throw new Error(i18n('fileUploader.formats', schema.formats.join('/')));\n      }\n    }\n  }, {\n    key: \"uploadFromRequest\",\n    value: function uploadFromRequest(path, request, schema) {\n      try {\n        FileUploader.validate(request.file, schema);\n      } catch (error) {\n        request.onError(error);\n        return;\n      }\n\n      var extension = extractExtensionFrom(request.file.name);\n      var id = uuid();\n      var filename = \"\".concat(id, \".\").concat(extension);\n      var privateUrl = \"\".concat(path, \"/\").concat(filename);\n      this.uploadToServer(request.file, path, filename, function (percent) {\n        return request.onProgress({\n          percent: percent\n        });\n      }).then(function (publicUrl) {\n        request.onSuccess({\n          id: id,\n          name: request.file.name,\n          sizeInBytes: request.file.size,\n          privateUrl: privateUrl,\n          publicUrl: publicUrl,\n          new: true\n        });\n      }).catch(function (error) {\n        request.onError(error);\n      });\n    }\n  }, {\n    key: \"uploadToServer\",\n    value: function () {\n      var _uploadToServer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(file, path, filename, onProgress) {\n        var token, formData, privateUrl;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return AuthToken.get();\n\n              case 2:\n                token = _context.sent;\n                formData = new FormData();\n                formData.append('file', file);\n                formData.append('filename', filename);\n                _context.next = 8;\n                return Axios.post(\"\".concat(config.backendUrl, \"/upload/\").concat(path), formData, {\n                  headers: {\n                    'Content-Type': 'multipart/form-data',\n                    authorization: token ? \"Bearer \".concat(token) : ''\n                  },\n                  onUploadProgress: function onUploadProgress(progressEvent) {\n                    var totalLength = progressEvent.lengthComputable ? progressEvent.total : progressEvent.target.getResponseHeader('content-length') || progressEvent.target.getResponseHeader('x-decompressed-content-length');\n\n                    if (totalLength !== null) {\n                      onProgress(Math.round(progressEvent.loaded * 100 / totalLength));\n                    }\n                  }\n                });\n\n              case 8:\n                privateUrl = \"\".concat(path, \"/\").concat(filename);\n                return _context.abrupt(\"return\", \"\".concat(config.backendUrl, \"/download?privateUrl=\").concat(privateUrl));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function uploadToServer(_x, _x2, _x3, _x4) {\n        return _uploadToServer.apply(this, arguments);\n      }\n\n      return uploadToServer;\n    }()\n  }]);\n\n  return FileUploader;\n}();",{"version":3,"sources":["E:/Projects/vue-library-master/1-Project/frontend/src/shared/file-upload/file-uploader.js"],"names":["uuid","i18n","filesize","AuthToken","Axios","config","extractExtensionFrom","filename","regex","exec","FileUploader","file","schema","image","type","startsWith","Error","size","extension","name","formats","includes","join","path","request","validate","error","onError","id","privateUrl","uploadToServer","percent","onProgress","then","publicUrl","onSuccess","sizeInBytes","new","catch","get","token","formData","FormData","append","post","backendUrl","headers","authorization","onUploadProgress","progressEvent","totalLength","lengthComputable","total","target","getResponseHeader","Math","round","loaded"],"mappings":"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","sourcesContent":["import * as uuid from 'uuid/v4';\nimport { i18n } from '@/i18n';\nimport filesize from 'filesize';\nimport { AuthToken } from '@/modules/auth/auth-token';\nimport Axios from 'axios';\nimport config from '@/config';\n\nfunction extractExtensionFrom(filename) {\n  if (!filename) {\n    return null;\n  }\n\n  const regex = /(?:\\.([^.]+))?$/;\n  return regex.exec(filename)[1];\n}\n\nexport class FileUploader {\n  static validate(file, schema) {\n    if (!schema) {\n      return;\n    }\n\n    if (schema.image) {\n      if (!file.type.startsWith('image')) {\n        throw new Error(i18n('fileUploader.image'));\n      }\n    }\n\n    if (schema.size && file.size > schema.size) {\n      throw new Error(\n        i18n('fileUploader.size', filesize(schema.size)),\n      );\n    }\n\n    const extension = extractExtensionFrom(file.name);\n\n    if (\n      schema.formats &&\n      !schema.formats.includes(extension)\n    ) {\n      throw new Error(\n        i18n(\n          'fileUploader.formats',\n          schema.formats.join('/'),\n        ),\n      );\n    }\n  }\n\n  static uploadFromRequest(path, request, schema) {\n    try {\n      FileUploader.validate(request.file, schema);\n    } catch (error) {\n      request.onError(error);\n      return;\n    }\n\n    const extension = extractExtensionFrom(\n      request.file.name,\n    );\n    const id = uuid();\n    const filename = `${id}.${extension}`;\n    const privateUrl = `${path}/${filename}`;\n\n    this.uploadToServer(\n      request.file,\n      path,\n      filename,\n      (percent) => request.onProgress({ percent }),\n    )\n      .then((publicUrl) => {\n        request.onSuccess({\n          id: id,\n          name: request.file.name,\n          sizeInBytes: request.file.size,\n          privateUrl,\n          publicUrl,\n          new: true,\n        });\n      })\n      .catch((error) => {\n        request.onError(error);\n      });\n  }\n\n  static async uploadToServer(\n    file,\n    path,\n    filename,\n    onProgress,\n  ) {\n    const token = await AuthToken.get();\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('filename', filename);\n    await Axios.post(\n      `${config.backendUrl}/upload/${path}`,\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          authorization: token ? `Bearer ${token}` : '',\n        },\n\n        onUploadProgress: (progressEvent) => {\n          const totalLength = progressEvent.lengthComputable\n            ? progressEvent.total\n            : progressEvent.target.getResponseHeader(\n                'content-length',\n              ) ||\n              progressEvent.target.getResponseHeader(\n                'x-decompressed-content-length',\n              );\n          if (totalLength !== null) {\n            onProgress(\n              Math.round(\n                (progressEvent.loaded * 100) / totalLength,\n              ),\n            );\n          }\n        },\n      },\n    );\n\n    const privateUrl = `${path}/${filename}`;\n\n    return `${\n      config.backendUrl\n    }/download?privateUrl=${privateUrl}`;\n  }\n}\n"]}]}