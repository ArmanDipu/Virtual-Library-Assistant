{"remainingRequest":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\importer\\importer.js","dependencies":[{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\src\\shared\\importer\\importer.js","mtime":1641838499847},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\babel.config.js","mtime":1641838494433},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641838763341},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1641838769328},{"path":"E:\\Projects\\vue-library-master\\1-Project\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1641838766164}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _classCallCheck from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"E:\\\\Projects\\\\vue-library-master\\\\1-Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport XLSX from 'xlsx';\nimport { ImporterSchema } from '@/shared/importer/importer-schema';\nimport { Excel } from '@/shared/excel/excel';\nimport { i18n } from '@/i18n';\n\nvar Importer = /*#__PURE__*/function () {\n  function Importer(fields) {\n    _classCallCheck(this, Importer);\n\n    this.schema = new ImporterSchema(fields);\n  }\n\n  _createClass(Importer, [{\n    key: \"downloadTemplate\",\n    value: function downloadTemplate(templateFileName) {\n      return Excel.exportAsExcelFile([], this.schema.labels, templateFileName);\n    }\n  }, {\n    key: \"castForDisplay\",\n    value: function () {\n      var _castForDisplay = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(row, index) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.schema.castForDisplay(row, index));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function castForDisplay(_x, _x2) {\n        return _castForDisplay.apply(this, arguments);\n      }\n\n      return castForDisplay;\n    }()\n  }, {\n    key: \"castForImport\",\n    value: function () {\n      var _castForImport = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(row) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.schema.castForImport(row));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function castForImport(_x3) {\n        return _castForImport.apply(this, arguments);\n      }\n\n      return castForImport;\n    }()\n  }, {\n    key: \"convertExcelFileToJson\",\n    value: function () {\n      var _convertExcelFileToJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(file) {\n        var skipHeader,\n            workbook,\n            json,\n            _args3 = arguments;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                skipHeader = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : true;\n                _context3.next = 3;\n                return this._convertExcelFileToWorkbook(file);\n\n              case 3:\n                workbook = _context3.sent;\n                json = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]], {\n                  header: 1,\n                  blankrows: false,\n                  range: skipHeader ? 1 : undefined,\n                  raw: true\n                });\n                return _context3.abrupt(\"return\", json);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function convertExcelFileToJson(_x4) {\n        return _convertExcelFileToJson.apply(this, arguments);\n      }\n\n      return convertExcelFileToJson;\n    }()\n  }, {\n    key: \"_convertExcelFileToWorkbook\",\n    value: function () {\n      var _convertExcelFileToWorkbook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(file) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this._readFile(file);\n\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", XLSX.read(data, {\n                  type: 'array'\n                }));\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                throw new Error(i18n('importer.errors.invalidFileUpload'));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n\n      function _convertExcelFileToWorkbook(_x5) {\n        return _convertExcelFileToWorkbook2.apply(this, arguments);\n      }\n\n      return _convertExcelFileToWorkbook;\n    }()\n  }, {\n    key: \"_readFile\",\n    value: function () {\n      var _readFile2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(file) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (file) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 2:\n                return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var reader = new FileReader();\n\n                  reader.onload = function (e) {\n                    try {\n                      var data = new Uint8Array(e.target.result);\n                      resolve(data);\n                    } catch (error) {\n                      reject(error);\n                    }\n                  };\n\n                  reader.onerror = function () {\n                    reject();\n                  };\n\n                  reader.readAsArrayBuffer(file);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function _readFile(_x6) {\n        return _readFile2.apply(this, arguments);\n      }\n\n      return _readFile;\n    }()\n  }]);\n\n  return Importer;\n}();\n\nexport { Importer as default };",{"version":3,"sources":["E:/Projects/vue-library-master/1-Project/frontend/src/shared/importer/importer.js"],"names":["XLSX","ImporterSchema","Excel","i18n","Importer","fields","schema","templateFileName","exportAsExcelFile","labels","row","index","castForDisplay","castForImport","file","skipHeader","_convertExcelFileToWorkbook","workbook","json","utils","sheet_to_json","Sheets","SheetNames","header","blankrows","range","undefined","raw","_readFile","data","read","type","Error","Promise","resolve","reject","reader","FileReader","onload","e","Uint8Array","target","result","error","onerror","readAsArrayBuffer"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\nimport { ImporterSchema } from '@/shared/importer/importer-schema';\nimport { Excel } from '@/shared/excel/excel';\nimport { i18n } from '@/i18n';\n\nexport default class Importer {\n  constructor(fields) {\n    this.schema = new ImporterSchema(fields);\n  }\n\n  downloadTemplate(templateFileName) {\n    return Excel.exportAsExcelFile(\n      [],\n      this.schema.labels,\n      templateFileName,\n    );\n  }\n\n  async castForDisplay(row, index) {\n    return this.schema.castForDisplay(row, index);\n  }\n\n  async castForImport(row) {\n    return this.schema.castForImport(row);\n  }\n\n  async convertExcelFileToJson(file, skipHeader = true) {\n    const workbook = await this._convertExcelFileToWorkbook(\n      file,\n    );\n\n    const json = XLSX.utils.sheet_to_json(\n      workbook.Sheets[workbook.SheetNames[0]],\n      {\n        header: 1,\n        blankrows: false,\n        range: skipHeader ? 1 : undefined,\n        raw: true,\n      },\n    );\n\n    return json;\n  }\n\n  async _convertExcelFileToWorkbook(file) {\n    try {\n      const data = await this._readFile(file);\n      return XLSX.read(data, {\n        type: 'array',\n      });\n    } catch (error) {\n      throw new Error(\n        i18n('importer.errors.invalidFileUpload'),\n      );\n    }\n  }\n\n  async _readFile(file) {\n    if (!file) {\n      return null;\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        try {\n          const data = new Uint8Array(e.target.result);\n          resolve(data);\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      reader.onerror = () => {\n        reject();\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }\n}\n"]}]}